# the following defines an ANN and weights on the nn's connections
# the ANN looks like this:
# INP L0   L1   OUT
# x1
# x2  N00  N10  y
# x3  N01  N11
# x4       N12
class,n00,popt4jlib.neural.ReLU
class,n01,popt4jlib.neural.ReLU
class,n10,popt4jlib.neural.ReLU
class,n11,popt4jlib.neural.ReLU
class,n12,popt4jlib.neural.ReLU
class,outputlayer,popt4jlib.neural.HardThres,0.0
array,layer1_arr,popt4jlib.neural.NNNodeIntf,n00,n01
array,layer2_arr,popt4jlib.neural.NNNodeIntf,n10,n11,n12
array,hiddenlayers,[Ljava.lang.Object;,layer1_arr,layer2_arr
matrix,hiddenws0,testdata/hiddenws0.dat
# contents of hiddenws0.dat are:
# 2 4
# 1,1 2,1 3,0 4,0
# 1,0 2,0 3,1 4,1
matrix,hiddenws1,testdata/hiddenws1.dat
# contents of hiddenws1.dat are:
# 3 2 
# 1,11 2,12
# 1,13 2,14
# 1,15 2,16
array,outputws,double,31.0,32.0,33.0
