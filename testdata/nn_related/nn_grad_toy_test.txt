# the following defines an ANN and weights on the nn's connections
# the ANN looks like this:
# INP L0   OUT
# x1  n00
#          y
# x2  n01
class,n00,popt4jlib.neural.Sigmoid,1.0
class,n01,popt4jlib.neural.Sigmoid,1.0
class,outputlayer,popt4jlib.neural.Sigmoid,1.0
array,layer1_arr,popt4jlib.neural.NNNodeIntf,n00,n01
array,hiddenlayers,[Ljava.lang.Object;,layer1_arr
class,costfunc,popt4jlib.neural.costfunction.MSSE
class,ffnn4trainb,popt4jlib.neural.FFNN4TrainB,hiddenlayers,outputlayer,costfunc
# matrix,hiddenws0,testdata/nn_related/hiddenws0_4_toy_test.dat
# contents of hiddenws0_4_toy_test.dat are:
# 2 2
# 1,0.05 2,-0.02
# 1,0.03 2,0.01
# array,outputws,double,0.5,1.0,0.0
array,weights,double,0.05,-0.02,0.0,0.03,0.01,0.0,0.5,1.0,0.0
# train data:
matrix,ffnn.traindata,testdata/nn_related/toy_train.dat
#ffnn.traindatafile,testdata/traindata1.dat
# train labels
dblarray,ffnn.trainlabels,testdata/nn_related/toy_train.dat.lbls
#ffnn.trainlabelsfile,testdata/trainlabels1.dat
