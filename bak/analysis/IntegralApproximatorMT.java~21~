package analysis;

import parallel.*;
import popt4jlib.*;
import java.util.*;
import java.io.Serializable;

/**
 * Performs parallel numerical integration in one dimension using the Adaptive
 * Simpson Procedure. The integrand must be at least smooth for the method to
 * work. If there are discontinuities the method will throw (by default a
 * StackOverflowException when the stack is full due to the recursive nature of
 * the intervals division around the discontinuity), and therefore, in the
 * presence of discontinuities in the interval of integration of the variable
 * being integrated, the user -if possible- should partition the initial
 * interval into subintervals whose ends are either the end-points of the
 * initial interval, or the discontinuity points of the function (the breaks).
 * If this is not possible (inifinite number of discontinuities or not known
 * where the function is discontinuous), the class unfortunately cannot be
 * work reliably.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class IntegralApproximatorMT implements FunctionIntf {
  private FunctionIntf _f;
  private double _eps = 1.e-6;
  private int _maxLvl = Integer.MAX_VALUE;
  private int _maxThreads = Integer.MAX_VALUE;
  private int _numExistingThreads = 0;
  private int _numCalls=0;


  /**
   * public constructor.
   * @param f FunctionIntf
   * @param params Hashtable may contain the following pairs:
   * <"integralapproximator.eps", Double eps> if present specifies the required
   * precision, default is 1.e-6,
   * <"integralapproximator.levelmax", Integer level> if present specifies the
   * maximum level of recursion in the Simpson method, default is
   * <CODE>Integer.MAX_VALUE</CODE>, and
   * <"integralapproximatormt.maxnumthreads", Integer num> if present specifies
   * the maximum number of threads to be used, default is
   * <CODE>Integer.MAX_VALUE</CODE>.
   */
  public IntegralApproximatorMT(FunctionIntf f, Hashtable params) {
    _f = f;
    if (params!=null) {
      try {
        Double epsD = (Double) params.get("integralapproximator.eps");
        if (epsD != null) _eps = epsD.doubleValue();
      }
      catch (Exception e) {
        e.printStackTrace(); // no-op
      }
      try {
        Integer mlI = (Integer) params.get("integralapproximator.levelmax");
        if (mlI != null) _maxLvl = mlI.intValue();
      }
      catch (Exception e) {
        e.printStackTrace(); // no-op
      }
      try {
        Integer ntI = (Integer) params.get("integralapproximatormt.maxnumthreads");
        if (ntI!=null && ntI.intValue()>0) _maxThreads = ntI.intValue();
      }
      catch (Exception e) {
        e.printStackTrace(); // no-op
      }
    }
  }


  /**
   * computes the integral with respect to the i-th variable of the function
   * provided in the constructor, from a lower limit a defined in the params
   * Hashtable, to the specified value x_i in the vector <CODE>x</CODE>.
   * @param x Object a <CODE>VectorIntf</CODE> or <CODE>double[]</CODE> object.
   * @param params Hashtable must contain at least a pair of the form
   * <li> <"integralapproximator.a", Double a> indicating the lower limit of
   * integration and a pair of the form
   * <li> <"integralapproximator.integrandvarindex", Integer i> indicating the
   * variable index for the integration (must range in
   * [0,<CODE>x.length-1</CODE>] if <CODE>x</CODE> is a <CODE>double[]</CODE> or
   * in [0,<CODE>x.getNumCoords()-1</CODE>] if <CODE>x</CODE> is a
   * <CODE>VectorIntf</CODE> object). Additionally, params must contain whatever
   * parameters are needed so that the function <CODE>f</CODE> passed in the
   * constructor needs in order to be evaluated.
   * <li> <"integralapproximator.H", Double h> if present specifies the width of
   * each sub-interval of the integration interval on which the adaptive
   * Simpson procedure will be used, default is (b-a)/100.0.
   * @throws IllegalArgumentException if any of the two pairs required in params
   * Hashtable are not present, or if the integration could not be carried out
   * with the required precision.
   * @return double
   */
  public double eval(Object x, Hashtable params) throws IllegalArgumentException {
    VectorIntf t = null;
    try {
      if (x instanceof VectorIntf)
        t = (VectorIntf) x;
      else t = new DblArray1Vector((double[]) x);
    }
    catch (Exception e) {
      throw new IllegalArgumentException("x cannot be converted to VectorIntf");
    }
    double a = 0;
    try {
      a = ((Double) params.get("integralapproximator.a")).doubleValue();
    }
    catch (Exception e) {
      throw new IllegalArgumentException("integralapproximator.a not well defined");
    }
    int ii = 0;
    try {
      ii = ((Integer) params.get("integralapproximator.integrandvarindex")).intValue();
    }
    catch (Exception e) {
      throw new IllegalArgumentException("integralapproximator.integrandvarindex not well defined");
    }
    double b = t.getCoord(ii);
    // short-cut
    if (Math.abs(b-a)<1.e-100) return 0;
    else if (b<a) throw new IllegalArgumentException("a>b not acceptable");
    double H = (b-a)/100.0;  // default spacing used to break the integration into subintervals
    try {
      Double HI = (Double) params.get("integralapproximator.H");
      if (HI!=null && HI.doubleValue()>0) H = HI.doubleValue();
    }
    catch (Exception e) {
      e.printStackTrace(); // no-op
    }
    try {
      double b2 = Math.min(b, a + H);
      double result = 0.0;
      while (b2 < b) {
        result += simpson(t, ii, a, b2, 0, _eps, params);
        a = b2;
        b2 = Math.min(b, a + H);
      }
      return result;
    }
    catch (IntegrationException e) {
      throw new IllegalArgumentException("increase max level allowed");
    }
    catch (ParallelException e) {
      e.printStackTrace();  // should never get here
      throw new IllegalArgumentException("ParallelException was thrown???");
    }
  }


  /**
   * returns the total number of calls to the Simpson method that this object
   * has invoked (the number is cumulative count, and will increase from one
   * eval() call to the next eval() call).
   * @return int
   */
  public synchronized int getTotalNumCalls() { return _numCalls; }


  private double simpson(VectorIntf x, int intvarind, double a, double b,
                         int level, double eps,
                         Hashtable p) throws IntegrationException, ParallelException {
    incrCalls();
    ++level;
    double h = b-a;
    double c = (a+b)/2.0;
    x.setCoord(intvarind, a);
    double fa = _f.eval(x, p);
    x.setCoord(intvarind, b);
    double fb = _f.eval(x,p);
    x.setCoord(intvarind, c);
    double fc = _f.eval(x,p);
    double simpson1 = h*(fa+4*fc+fb)/6.0;
    double d = (a+c)/2.0;
    double e = (c+b)/2.0;
    x.setCoord(intvarind, d);
    double fd = _f.eval(x,p);
    x.setCoord(intvarind, e);
    double fe = _f.eval(x,p);
    double simpson2 = h*(fa+4*fd+2*fc+4*fe+fb)/12.0;
    if (level>_maxLvl) {
      throw new IntegrationException("Simpson Adaptive Procedure failed, reached level="+level);
    }
    if (Math.abs(simpson2-simpson1)<15*eps) return simpson2;
    else {
      double epshalf = eps/2.0;
      boolean newexec = true;
      synchronized (this) {
        newexec = _numExistingThreads<=_maxThreads;
      }
      if (!newexec) {  // run on same thread
        double ls = simpson(x, intvarind, a, c, level, epshalf, p);
        double rs = simpson(x, intvarind, c, b, level, epshalf, p);
        return ls + rs;
      }
      ParallelBatchTaskExecutor executor = new ParallelBatchTaskExecutor(2);
      synchronized (this) {
        _numExistingThreads += 2;
      }
      SimpsonTask tl = new SimpsonTask(x, intvarind, a, c, level, epshalf, p);
      SimpsonTask tr = new SimpsonTask(x, intvarind, c, b, level, epshalf, p);
      Vector tasks = new Vector();
      tasks.add(tl);
      tasks.add(tr);
      executor.executeBatch(tasks);
      executor.shutDown();
      synchronized (this) {
        _numExistingThreads -= 2;
      }
      return tl.getResult()+tr.getResult();
    }
  }


  private synchronized void incrCalls() { ++_numCalls; }


  class SimpsonTask implements TaskObject {
    private VectorIntf _x;
    private int _ivi;
    private double _eps;
    private int _level;
    private double _a;
    private double _b;
    private Hashtable _params;
    private double _res=Double.NaN;
    private boolean _isDone=false;

    public SimpsonTask(VectorIntf x, int ivi, double a, double b, int level,
                       double eps, Hashtable p) {
      _x = x.newCopy();
      _ivi = ivi;
      _a = a;
      _b = b;
      _level = level;
      _eps = eps;
      _params = p;
    }
    public Serializable run() {
      try {
        double res = simpson(_x, _ivi, _a, _b, _level, _eps, _params);
        synchronized (this) {
          _res = res;
        }
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      synchronized(this) {
        _isDone = true;
        return this;
      }
    }
    public synchronized boolean isDone() {
      return _isDone;
    }
    public synchronized double getResult() { return _res; }
    public synchronized void copyFrom(TaskObject t) throws IllegalArgumentException {
      throw new IllegalArgumentException("SimpsonTask does not support copyFrom(t) method");
    }
  }
}

