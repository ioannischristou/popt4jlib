package tests;

import popt4jlib.MSSC.*;
import popt4jlib.*;
import utils.*;
import java.util.*;

/**
 * driver class for multi-threaded K-Means clusterer for MSSC.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class GMeansMTClustererTest {

  /**
   *
   * @param args String[]
   */
  public static void main(String[] args) {
    if (args.length<2) {
      System.err.println("usage: java -cp <classpath> tests.GMeansMTClustererTest <vectorsfilename> <k> [num_threads] [rndseed] [doKMeans++]");
      System.exit(-1);
    }
    long start = System.currentTimeMillis();
    final String file = args[0];
    final int k = Integer.parseInt(args[1]);
    final int nt = args.length>2 ? Integer.parseInt(args[2]) : 1;
    final long seed = args.length>3 ? Long.parseLong(args[3]) : -1;
    final boolean do_kmeanspp = args.length>4 ? Boolean.valueOf(args[4]).booleanValue() : false;
    if (seed >= 0) RndUtil.getInstance().setSeed(seed);  // deterministic pseudo-random number generation
    try {
      Vector docs = DataMgr.readVectorsFromFile(file);
      final int n = docs.size();
      if (k>n) {
        System.err.println("<k> cannot be larger or equal to the <n>, the number of vectors to cluster");
        System.exit(-1);
      }
      Hashtable p = new Hashtable();
      p.put("gmeansmt.numthreads", new Integer(nt));
      p.put("gmeansmt.TerminationCriteria", new popt4jlib.MSSC.ClustererTerminationNoMove());
      p.put("gmeansmt.evaluator", new popt4jlib.MSSC.KMeansSqrEvaluator());
      Vector init_centers = new Vector();
      if (do_kmeanspp==false) {
        Set ics = new TreeSet();
        for (int i = 0; i < k; i++) {
          int rj = -1;
          while (true) {
            rj = RndUtil.getInstance().getRandom().nextInt(n);
            Integer rjI = new Integer(rj);
            if (ics.contains(rjI) == false) {
              ics.add(rjI);
              break;
            }
          }
          VectorIntf cj = ( (VectorIntf) docs.elementAt(rj)).newCopy();
          init_centers.addElement(cj);
        }
      }
      else {
        System.err.println("Running KMeans++ for seed initialization");
        KMeansPP kmpp = new KMeansPP(docs);
        init_centers = kmpp.getInitialCenters(k);
      }
      GMeansMTClusterer gmclusterer = new GMeansMTClusterer();
      gmclusterer.addAllVectors(docs);
      gmclusterer.setParams(p);
      gmclusterer.setInitialClustering(init_centers);
      Vector centers = gmclusterer.clusterVectors();
      long dur = System.currentTimeMillis()-start;
      System.out.println("MSSC="+gmclusterer.eval(new popt4jlib.MSSC.KMeansSqrEvaluator())+" duration (msecs): "+dur);
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

