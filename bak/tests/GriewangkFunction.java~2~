package tests;

import popt4jlib.*;
import java.util.*;

/**
 *
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 *
 * This class implements the Griewangk Function in n-dimensions
 * The function assumes its global minimum at x=0 and its minimum value is 0.
 * Bound constraints are: x \in [-500, +500]^n
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class GriewangkFunction implements FunctionIntf {
  public GriewangkFunction() {
  }

  public double eval(Object arg, Hashtable p) {
    try {
      double[] x = (double[]) arg;
      int n = x.length;
      double sum = 0;
      double prod = 1.0;
      for (int i = 0; i < n; i++) {
        sum += x[i]*x[i];
        prod *= Math.cos(x[i]/Math.sqrt(i+1));
      }
      return sum/4000.0 - prod + 1;
    }
    catch (ClassCastException e) {
      VectorIntf x = (VectorIntf) arg;
      int n = x.getNumCoords();
      double sum = 0;
      double prod = 1.0;
      for (int i = 0; i < n; i++) {
        double xi = x.getCoord(i);
        sum += xi*xi;
        prod *= Math.cos(xi/Math.sqrt(i+1));
      }
      return sum/4000.0 - prod + 1;
    }
  }


  public static void main(String[] args) {
    int n = args.length;
    double[] x = new double[n];
    Hashtable p = null;
    for (int i=0; i<n; i++) {
      x[i] = Double.parseDouble(args[i]);
    }
    GriewangkFunction f = new GriewangkFunction();
    double res=f.eval(x,p);
    System.out.println(res);
  }
}

