package tests;

import popt4jlib.*;
import popt4jlib.PS.*;
import popt4jlib.GradientDescent.*;
import java.util.*;

/**
 * test-driver program for the DPSO (Distributed Particle Swarm Optimization)
 * algorithm.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class DPSOTest {

  /**
   * single public no-arg constructor
   */
  public DPSOTest() {
  }


  /**
   * invoke as <CODE>java -&ltclasspath&gt tests.DPSOTest &ltparams_file&gt</CODE>
   * where the params_file must contain the following lines:
   * <li> class,dpso.function, &lt fullclassname &gt mandatory, specifies full
   * java class name of the function to be optimized (implementing the
   * <CODE>popt4jlib.FunctionIntf</CODE> interface.)
   * <li> class,dpso.localoptimizer, &ltfullclassname&gt optional, if present,
   * specifies the full java class name of the class implementing the
   * <CODE>popt4jlib.GradientDescent.LocalOptimizerIntf</CODE> interface that
   * will be used to post-optimize the DPSO search, starting from the best
   * solution the DPSO process will find.
   * <li> class,dpso.randomparticlemaker, &ltfullclassname&gt, mandatory, the
   * full class name of the class implementing the
   * <CODE>popt4jlib.RandomChromosomeMakerIntf</CODE> interface, responsible
   * for creating valid random chromosome Objects to populate the islands.
   * <li> class,dpso.randomvelocitymaker, &ltfullclassname&gt, mandatory, the
   * full class name of the class implementing the
   * <CODE>popt4jlib.PS.RandomVelocityMakerIntf</CODE> responsible for creating
   * valid random velocity Objects to determine next position of the particles.
   * <li> class,dpso.vmover, &ltfullclassname&gt, mandatory, the full class name
   * of the class implementing the <CODE>popt4jlib.PS.NewVelocityMakerIntf</CODE>
   * interface, responsible for determining the new velocity
   * of a particle given its current position, velocity and its neighborhood.
   * <li> class,dpso.c2vadder, &ltfullclassname&gt, mandatory, the full class
   * name of the class implementing the
   * <CODE>popt4jlib.PS.ChromosomeVelocityAdderIntf</CODE> interface that
   * produces the next position of a particle given its current position and
   * velocity.
   * <li> dpso.numthreads, $num$ optional, how many threads will be used,
   * default is 1.
   * <li> rndgen,$num$,$num2$ mandatory, specifies the starting random
   * seed to use for each of the $num2$ threads to use (the value num2 must
   * equal the number given for the dpso.numthreads, or 1 if no such line is
   * present). The value of num should be a positive integer.
   * <li> class,dpso.c2amaker,&ltfullclassname&gt, optional, if present the full
   * class name of the class implementing the
   * <CODE>popt4jlib.Chromosome2ArgMakerIntf</CODE> interface that is
   * responsible for tranforming a chromosome Object to a function argument
   * Object. If not present, the default identity transformation is assumed.
   * <li> class,dpso.a2cmaker,&ltfullclassname&gt, optional, if present the full
   * class name of the class implementing the
   * <CODE>popt4jlib.Arg2ChromosomeMakerIntf</CODE> interface that's responsible
   * for transforming a FunctionIntf argument Object to a chromosome
   * Object. If not present, the default identity transformation is assumed. The
   * a2c object is only useful when other ObserverIntf objects register for this
   * SubjectIntf object and also add back solutions to it (as FunctionIntf args)
   * <li> dpso.numgens, $num$ optional, the number of generations to run the
   * DPSO, default is 1.
   * <li> dpso.immprob, $num$ optional, the probability with which an sub-
   * population will send some of its members to migrate to another (island)
   * sub-population, default is 0.01
   * <li> dpso.numinitpop, $num$ optional, the initial population number for
   * each island, default is 10.
   * <li> dpso.poplimit, $num$ optional, the maximum population for each
   * sub-population, default is 10.
   * <li> dpso.neighborhooddistance, $num$ optional, assuming the particles
   * in a sub-population are arranged in a ring topology, dist is the maximum
   * distance from the left or the right of a given particle within which the
   * best (guiding) particle position will be sought for the computation of the
   * next position of the given particle, default is 1.
   * <p> Additionally, the params_file must contain any parameters required for
   * the function optimized, as well as any parameters for any of the objects
   * used in the DPSO process (such as the objects implementing the
   * Arg2ChromosomeMakerIntf etc. interfaces).
   * @param args String[]
   */
  public static void main(String[] args) {
    try {
      long start_time = System.currentTimeMillis();
      Hashtable params = utils.DataMgr.readPropsFromFile(args[0]);
      FunctionIntf func = (FunctionIntf) params.get("dpso.function");
      FunctionBase wrapper_func = new FunctionBase(func);
      params.put("dpso.function",wrapper_func);
      DPSO opter = new DPSO(params);
      utils.PairObjDouble p = opter.minimize(wrapper_func);
      double[] arg = (double[]) p.getArg();
      System.out.print("best soln found:[");
      for (int i=0;i<arg.length;i++) System.out.print(arg[i]+" ");
      System.out.println("] VAL="+p.getDouble());
      // final local optimization
      LocalOptimizerIntf lasdst = (LocalOptimizerIntf) params.get("dpso.localoptimizer");
      if (lasdst!=null) {
        VectorIntf x0 = new popt4jlib.DblArray1Vector(arg);
        params.put("gradientdescent.x0", x0);
        lasdst.setParams(params);
        utils.PairObjDouble p2 = lasdst.minimize(wrapper_func);
        VectorIntf xf = (VectorIntf) p2.getArg();
        System.out.print(
            "Optimized (via LocalOptimizerIntf) best soln found:[");
        for (int i = 0; i < xf.getNumCoords(); i++) System.out.print(xf.
            getCoord(i) + " ");
        System.out.println("] VAL=" + p2.getDouble());
      }
      System.err.println("total function evaluations="+wrapper_func.getEvalCount());
      long dur = System.currentTimeMillis()-start_time;
      System.out.println("total time (msecs): "+dur);
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}
