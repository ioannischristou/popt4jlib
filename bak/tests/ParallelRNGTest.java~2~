package tests;

import parallel.*;
import utils.*;
import java.util.*;

/**
 * Test the ability of two threads using the RndUtil to generate the same
 * sequence of numbers.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class ParallelRNGTest {
  public ParallelRNGTest() {
  }

  public static void main(String[] args) {
    final int size = Integer.parseInt(args[0]);
    TTest t1=new TTest(1, size);
    TTest t2 = new TTest(1, size);
    t1.start();
    t2.start();
    try {
      while (t1._isDone == false) {
        Thread.currentThread().sleep(1000); // wait 1 sec.
      }
      while (t1._isDone == false) {
        Thread.currentThread().sleep(1000); // wait 1 sec.
      }
    }
    catch (InterruptedException e) {
      e.printStackTrace();
    }
    // test numbers
    for (int i=0; i<size; i++) {
      if (t1._numbers[1]!=t2._numbers[i]) {
        System.out.println("Random class did not produce the same seq in two concurrent threads");
        return;
      }
    }
    System.out.println("Random class produced the same seq in two concurrent threads");

  }
}

class TTest extends Thread {
  Random _r;
  int[] _numbers;
  boolean _isDone=false;

  public TTest(int seed, int size) {
    _r = new Random(seed);
    _numbers = new int[size];
  }

  public void run() {
    for (int i=0; i<_numbers.length; i++) {
      _numbers[i] = _r.nextInt(1000);
    }
    _isDone=true;
  }
}
