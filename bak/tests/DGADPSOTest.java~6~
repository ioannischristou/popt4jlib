package tests;

import popt4jlib.*;
import popt4jlib.GA.*;
import popt4jlib.PS.*;
import java.util.*;

/**
 * a demo test-driver class exercises the combination of two meta-heuristics
 * namely DGA and DPSO in optimizing a single function, through the Observer
 * Design Pattern implemented for these processes. This program creates two
 * optimizers, a DGA and a DPSO object, and registers each one as an observer
 * for the other. Whenever a new incumbent is found for one process, it is
 * sent to the other process which "receives" it as a new "immigrant" and
 * continues it its search process.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class DGADPSOTest {

  /**
   * public no-arg constructor
   */
  public DGADPSOTest() {
  }


  /**
   * invoke as <CODE>java -cp &ltclasspath&gt tests.DGADPSOTest &ltparams_file&gt</CODE>
   * The params_file must contain lines that are the union of the lines expected
   * in the <CODE>tests.DGATest</CODE> and <CODE>tests.DPSOTest</CODE> classes
   * documentation.
   * @param args String[]
   */
  public static void main(String[] args) {
    try {
      long start_time = System.currentTimeMillis();
      Hashtable params = utils.DataMgr.readPropsFromFile(args[0]);
      FunctionIntf func = (FunctionIntf) params.get("dga.function");
      FunctionBase wrapper_func = new FunctionBase(func);
      params.put("dga.function",wrapper_func);
      params.put("dpso.function", wrapper_func);
      params.put("ensemblename","dga_dpso_ensemble");
      parallel.Barrier.setNumThreads("dga_dpso_ensemble", 2);
      DGA opter = new DGA(params);
      DPSO opter2 = new DPSO(params);
      opter.registerObserver(opter2);
      opter2.registerObserver(opter);
      OptThread t1 = new OptThread(opter, wrapper_func);
      OptThread t2 = new OptThread(opter2, wrapper_func);
      t1.start();
      t2.start();
      t1.join();
      t2.join();
      utils.PairObjDouble p1 = t1.getPairObjDouble();
      utils.PairObjDouble p2 = t2.getPairObjDouble();
      utils.PairObjDouble p = p1.getDouble()<=p2.getDouble() ? p1 : p2;
      double[] arg =  (double[]) p.getArg();
      if (arg!=null) {
        System.out.print("best soln found:[");
        for (int i = 0; i < arg.length; i++) System.out.print(arg[i] + " ");
        System.out.println("] VAL=" + p.getDouble());
      }  else System.err.println("DGA/DPSO did not find any solution.");
      System.out.println("total function evaluations="+wrapper_func.getEvalCount());
      long end_time = System.currentTimeMillis();
      System.out.println("total time (msecs): "+(end_time-start_time));
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

class OptThread extends Thread {
  private OptimizerIntf _opt;
  private utils.PairObjDouble _result;
  private FunctionIntf _f;

  public OptThread(OptimizerIntf opt, FunctionIntf f) {
    _opt = opt;
    _f = f;
  }

  public utils.PairObjDouble getPairObjDouble() { return _result; }

  public void run() {
    try {
      _result = _opt.minimize(_f);
    }
    catch (OptimizerException e) {
      e.printStackTrace();
    }
  }
}

