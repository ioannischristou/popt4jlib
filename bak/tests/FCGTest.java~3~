package tests;

import popt4jlib.*;
import utils.*;
import popt4jlib.GradientDescent.*;
import java.util.*;

public class FCGTest {
  public FCGTest() {
  }

  public static void main(String[] args) {
    try {
      Hashtable params = utils.DataMgr.readPropsFromFile(args[0]);
      FunctionIntf func = (FunctionIntf) params.get("fcg.function");
      FunctionBase wrapper_func = new FunctionBase(func);
      params.put("fcg.function",wrapper_func);
      final int n = ((Integer) params.get("fcg.numdimensions")).intValue();
      final double maxargval = ((Double) params.get("fcg.functionargmaxval")).doubleValue();
      final double minargval = ((Double) params.get("fcg.functionargminval")).doubleValue();
      // add the initial points
      final int numtries = ((Integer) params.get("fcg.numtries")).intValue();
      for (int i=0; i<numtries; i++) {
        VectorIntf x0 = new DblArray1Vector(new double[n]);
        for (int j=0; j<n; j++) {
          double maxargvalj = maxargval;
          Double maxargvaljD = (Double) params.get("fcg.functionargmaxval"+j);
          if (maxargvaljD!=null && maxargvaljD.doubleValue()<maxargval)
            maxargvalj = maxargvaljD.doubleValue();
          double minargvalj = minargval;
          Double minargvaljD = (Double) params.get("fcg.functionargminval"+j);
          if (minargvaljD!=null && minargvaljD.doubleValue()>minargval)
            minargvalj = minargvaljD.doubleValue();
          double val = minargvalj+RndUtil.getInstance().getRandom().nextDouble()*(maxargvalj-minargvalj);
          x0.setCoord(j, val);
        }
        params.put("fcg.x"+i, x0);
      }
      FletcherConjugateGradient opter = new FletcherConjugateGradient(params);
      utils.PairObjDouble p = opter.minimize(wrapper_func);
      VectorIntf arg = (VectorIntf) p.getArg();
      System.out.print("best soln found:[");
      for (int i=0;i<arg.getNumCoords();i++) System.out.print(arg.getCoord(i)+" ");
      System.out.println("] VAL="+p.getDouble());
      System.err.println("numSolutionsFound="+opter.getNumOK()+" numFailed="+opter.getNumFailed());
      VecFunctionIntf grad = (VecFunctionIntf) params.get("fcg.gradient");
      if (grad==null) grad = new popt4jlib.GradientDescent.GradApproximator(func);
      VectorIntf g = grad.eval(arg,params);
      double norm = VecUtil.norm(g,2);
      double norminf = VecUtil.normInfinity(g);
      System.err.println("checking: ||g(best)||="+norm+" ||g(best)||_inf="+norminf);
      System.err.println("total function evaluations="+wrapper_func.getEvalCount());
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}

