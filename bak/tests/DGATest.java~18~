package tests;

import popt4jlib.*;
import popt4jlib.GA.*;
import popt4jlib.GradientDescent.*;
import java.util.*;

public class DGATest {
  public DGATest() {
  }

  public static void main(String[] args) {
    try {
      long start_time = System.currentTimeMillis();
      Hashtable params = utils.DataMgr.readPropsFromFile(args[0]);
      FunctionIntf func = (FunctionIntf) params.get("dga.function");
      FunctionBase wrapper_func = new FunctionBase(func);
      params.put("dga.function",wrapper_func);
      DGA opter = new DGA(params);
      // check for an ObserverIntf
      ObserverIntf obs = (ObserverIntf) params.get("dga.observerlocaloptimizer");
      if (obs!=null) {
        opter.registerObserver(obs);
        ((LocalOptimizerIntf) obs).setParams(params);
      }
      utils.PairObjDouble p = opter.minimize(wrapper_func);
      double[] arg = (double[]) p.getArg();
      if (arg!=null) {
        System.out.print("best soln found:[");
        for (int i = 0; i < arg.length; i++) System.out.print(arg[i] + " ");
        System.out.println("] VAL=" + p.getDouble());
/*
        // finally see how mutation went
        MutationOpIntf mop = (MutationOpIntf) params.get("dga.mutationop");
        if (mop!=null && mop instanceof DblArray1GradientDescentMutationOp) {
          int s = ((DblArray1GradientDescentMutationOp) mop).getSuccessfulMutations();
          int f = ((DblArray1GradientDescentMutationOp) mop).getFailedMutations();
          System.err.println("successful mutations="+s+" failed mutations="+f);
        }
*/
      // final local optimization
        LocalOptimizerIntf lasdst = (LocalOptimizerIntf) params.get("dga.localoptimizer");
        if (lasdst!=null) {
          VectorIntf x0 = new popt4jlib.DblArray1Vector(arg);
          params.put("gradientdescent.x0", x0);
          lasdst.setParams(params);
          utils.PairObjDouble p2 = lasdst.minimize(wrapper_func);
          VectorIntf xf = (VectorIntf) p2.getArg();
          System.out.print("Optimized (via LocalOptimizer) best soln found:[");
          for (int i = 0; i < xf.getNumCoords(); i++)
            System.out.print(xf.getCoord(i) + " ");
          System.out.println("] VAL=" + p2.getDouble());
        }
      }  else System.err.println("DGA did not find any solution.");
      System.out.println("total function evaluations="+wrapper_func.getEvalCount());
      long end_time = System.currentTimeMillis();
      System.out.println("total time (msecs): "+(end_time-start_time));
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}
