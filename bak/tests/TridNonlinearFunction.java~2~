package tests;

import popt4jlib.*;
import java.util.*;

/**
 *
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 *
 * This class implements a variation of the TRID Function (convex quadratic)
 * in n-dimensions that is highly nonlinear.
 * Bound constraints are: x \in [-n^2, +n^2]^n
 * @author Ioannis T. Christou
 * @version 1.0
 */

public class TridNonlinearFunction implements FunctionIntf {
  public TridNonlinearFunction() {
  }

  public double eval(Object arg, Hashtable p) {
    if (arg instanceof VectorIntf) {
      VectorIntf x = (VectorIntf) arg;
      final int n = x.getNumCoords();
      double t1=0; double t2=0;
      for (int i=0; i<n; i++) {
        double xi = x.getCoord(i);
        t1 += (xi-1)*(xi-1);
        if (i>0) {
          double xim1=0.0;
          if (i%2==0) xim1 = Math.sin(x.getCoord(i-1));
          else xim1 = Math.cos(x.getCoord(i-1));
          t2 += xi * xim1;
        }
      }
      return t1 - t2;
    } else {
      double[] x = (double[]) arg;
      final int n = x.length;
      double t1=0; double t2=0;
      for (int i=0; i<n; i++) {
        double xi = x[i];
        t1 += (xi-1)*(xi-1);
        if (i>0) {
          double xim1=0.0;
          if (i%2==0) xim1 = Math.sin(x[i-1]);
          else xim1 = Math.cos(x[i-1]);
          t2 += xi * xim1;
        }
      }
      return t1 - t2;
    }
  }
}

