package tests;

import popt4jlib.*;
import java.util.*;

/**
 *
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 *
 * This class implements the Schwefel Function in n-dimensions
 * The function assumes its global minimum at x=420.9687e where e is the unit
 * vector in n dimensions, and its minimum value is -418.9829n
 * Bound constraints are: x \in [-500, +500]^n
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class SchwefelFunction implements FunctionIntf {
  public SchwefelFunction() {
  }

  public double eval(Object arg, Hashtable p) {
    if (arg instanceof VectorIntf) {
      VectorIntf x = (VectorIntf) arg;
      int n = x.getNumCoords();
      double res = 0;
      for (int i = 0; i < n; i++) {
        double xi = x.getCoord(i);
        res -= xi*Math.sin(Math.sqrt(Math.abs(xi)));
      }
      return res;
    } else {
      double[] x = (double[]) arg;
      int n = x.length;
      double res = 0;
      for (int i = 0; i < n; i++) {
        res -= x[i]*Math.sin(Math.sqrt(Math.abs(x[i])));
      }
      return res;
    }
  }


  public static void main(String[] args) {
    int n = args.length;
    double[] x = new double[n];
    Hashtable p = null;
    for (int i=0; i<n; i++) {
      x[i] = Double.parseDouble(args[i]);
    }
    SchwefelFunction f = new SchwefelFunction();
    double res=f.eval(x,p);
    System.out.println(res);
  }
}

