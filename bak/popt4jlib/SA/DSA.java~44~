package popt4jlib.SA;

import utils.*;
import popt4jlib.*;
import java.util.*;

/**
 * The DSA class implements a parallel Simulated Annealing algorithm for the
 * minimization of a function to be passed in as argument object implementing
 * the FunctionIntf argument of the <CODE>minimize(f)</CODE> method.
 * The parallelization of the SA method consists of spawning a number of threads
 * and during an epoch (where the temperature remains constant) each thread
 * performs a separate independent search of the search space, having started
 * from the same point as all other threads running in the process. When the
 * time comes to lower the temperature of the SA process, all threads stop at a
 * barrier point, and start over with initial starting point, the best solution
 * found so far by any of the threads running in the process (the threads do not
 * perform an identical search because each thread is given a different random
 * number generator.)
 * This strategy is described in the paper on Parallel Simulated Anneaing.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class DSA implements OptimizerIntf {
  private static int _nextId=0;
  private int _id;
  private Hashtable _params=null;
  double _incValue=Double.MAX_VALUE;
  Object _inc=null;  // incumbent chromosome
  DSAIndividual _schedInc=null;  // incumbent chromosome for a given schedule temp.
  double _schedVal=Double.MAX_VALUE;
  int _schedCnt=0;
  FunctionIntf _f=null;

  private DSAThread[] _threads=null;


  /**
   * public constructor assigns a unique id among all DSA objects it constructs
   */
  public DSA() {
    _id = incrID();
  }


  /**
   * public constructor taking as input the parameters of the DSA process to be
   * used later on when the minimize(f) method is called. The parameters will be
   * copied so modifying the Hashtable that is passed as argument later on, will
   * not affect the parameters of the DSA object.
   * Unique id is assigned to this object among all DSA objects.
   * @param params Hashtable
   */
  public DSA(Hashtable params) {
    this();
    try {
      setParams(params);
    } catch (Exception e) {
      e.printStackTrace();  // no-op: cannot reach this point
    }
  }


  /**
   * return a copy of the parameters. Modifications to the returned object
   * do not affect the data member.
   * @return Hashtable
   */
  synchronized Hashtable getParams() {
    return new Hashtable(_params);
  }


  /**
   * the optimization params are set to p. Later modifying the Hashtable that is
   * passed as argument, will not affect the parameters of the DSA object.
   * @param p Hashtable
   * @throws OptimizerException if this method is called while another thread
   * is running the <CODE>minimize(f)</CODE> method on this object.
   */
  synchronized void setParams(Hashtable p) throws OptimizerException {
    if (_f!=null) throw new OptimizerException("cannot modify parameters while running");
    _params = null;
    _params = new Hashtable(p);  // own the params
  }


  /**
   * reset fields that need resetting so that another thread (or the current one)
   * can re-use the object's <CODE>minimize(f)</CODE> method.
   */
  synchronized void reset() {
    try {
      parallel.Barrier.removeInstance("dsa." + _id);
    }
    catch (parallel.ParallelException e) {
      e.printStackTrace();
    }
    _f = null;
    _inc = null;
    _incValue = Double.MAX_VALUE;
    _schedVal = Double.MAX_VALUE;
    _schedInc = null;
  }


  /**
   * introduced to keep FindBugs happy...
   * @return FunctionIntf
   */
  synchronized FunctionIntf getFunction() {
    return _f;
  }


  /**
   * The most important method of the class, that runs a parallel implementation
   * of the SA method. Prior to calling this method, a number of parameters must
   * have been passed in the DSA object, either in construction time, or via a
   * call to setParams(p). These are:
   *
   * <li> <"dsa.randomchromosomemaker", RandomChromosomeMakerIntf r> mandatory, the
   * object responsible for implementing the interface that allows creating
   * random initial chromosome objects.
   * <li> <"dsa.movemaker", NewChromosomeMakerIntf movemaker> mandatory, the object
   * responsible for implementing the interface that allows creating new
   * chromosome Objects from an existing one (makes a move).
   * <li> <"dsa.c2amaker", Chromosome2ArgMakerIntf c2amaker> optional, an object
   * implementing the Chromosome2ArgMakerIntf that transforms chromosome Objects
   * used in the SA process -and manipulated by the Object implementing
   * the NewChromosomeMakerIntf interface- into argument Objects that can be
   * passed into the FunctionIntf object that the process minimizes. Default is
   * null, which results in the chromosome objects being passed "as-is" to the
   * FunctionIntf object being minimized.
   * <li> <"dsa.numthreads, Integer nt> optional, the number of threads to be run by
   * the process, default is 1.
   * <li> <"dsa.numouteriters, Integer nglobaliters> optional, the total number of
   * "generations" i.e. outer iterations to run, default is 100.
   * <li> <"dsa.numtriesperiter, Integer triespiter> optional, the number of
   * iterations each thread will run before communicating its incumbent solution
   * to all others, and get the best overall incumbent -among running threads-
   * to continue with, default is 100.
   * <li> <"dsa.schedule", SAScheduleIntf sched> optional, an object implementing the
   * SAScheduleIntf that determines the temperature at each "generation" i.e.
   * outer iteration. Default is LinScaleSchedule, that can be configured by
   * the following two optional parameters:
   * <li> <"dsa.T0", Double t0> optional, initial temperature, default is 1000.0
   * <li> <"dsa.K", Double k> optional, the "Boltzman constant", default is 20.0
   *
   * The result is a PairObjDouble object that contains the best function arg.
   * along with the minimum function value obtained by this argument (or null
   * if the process fails to find any valid function argument).
   * @param f FunctionIntf
   * @throws OptimizerException if another thread is currently running the
   * <CODE>minimize(f)</CODE> method on this object, and also if anything goes
   * wrong in the optimization process.
   * @return PairObjDouble an object that holds both the best value found by the
   * DSA process run as well as the argmin -the argument that produced this best
   * value.
   */
  public PairObjDouble minimize(FunctionIntf f) throws OptimizerException {
    try {
      int nt = 1;
      synchronized (this) {
        if (_f != null)
          throw new OptimizerException("DSA.minimize(): another thread is "+
                                       "concurrently executing the method on"+
                                       " the same object");
        _f = f;
        Integer ntI = (Integer) _params.get("dsa.numthreads");
        if (ntI != null) nt = ntI.intValue();
        if (nt < 1)throw new OptimizerException(
      "DSA.minimize(): invalid number of threads specified");
        RndUtil.addExtraInstances(nt);  // not needed
        _threads = new DSAThread[nt];
        _schedCnt = nt;
      }

      try {
        parallel.Barrier.setNumThreads("dsa." + _id, nt); // init the Barrier obj.
      }
      catch (parallel.ParallelException e) {
        e.printStackTrace();
        throw new OptimizerException("barrier init. failed");
      }

      for (int i = 0; i < nt; i++) {
        _threads[i] = new DSAThread(this, i);
      }
      for (int i = 0; i < nt; i++) {
        _threads[i].start();
      }

      for (int i = 0; i < nt; i++) {
        DSAThreadAux rti = _threads[i].getDSAThreadAux();
        rti.waitForTask();  // equivalent to _threads[i].join();
      }

      synchronized(this) {
        Chromosome2ArgMakerIntf c2amaker = (Chromosome2ArgMakerIntf) _params.
            get(
            "dsa.c2amaker");
        Object arg = _inc;
        if (c2amaker != null)
          arg = c2amaker.getArg(_inc, _params);
        return new PairObjDouble(arg, _incValue);
      }
    }
    finally {
      reset();
    }
  }


  /**
   * update if we have an incumbent
   * @param ind DSAIndividual
   * @throws OptimizerException in case of insanity (may only happen if the
   * function to be minimized is not reentrant and the debug bit
   * <CODE>Constants.DSA</CODE> is set in the <CODE>Debug</CODE> class)
   */
  synchronized void setIncumbent(DSAIndividual ind) throws OptimizerException {
    if (ind==null) return;
    if (_incValue > ind.getValue()) {  // minimization problems only
      System.err.println("Updating Incumbent w/ val="+ind.getValue());
      if (Debug.debug(Constants.DSA)!=0) {
        // sanity check
        Object arg = ind.getChromosome(); // assume the chromosome Object is
        // the same used for function evals.
        Chromosome2ArgMakerIntf c2amaker = (Chromosome2ArgMakerIntf) _params.
            get("dsa.c2amaker");
        if (c2amaker != null) // oops, no it wasn't
          arg = c2amaker.getArg(ind.getChromosome(), _params);
        double incval = _f.eval(arg, _params);
        if (Math.abs(incval - ind.getValue()) > 1.e-25) {
          Messenger.getInstance().msg("DSA.setIncumbent(): ind-val=" +
                                      ind.getValue() + " fval=" + incval +
                                      " ???", 0);
          throw new OptimizerException(
              "DSA.setIncumbent(): insanity detected; " +
              "most likely evaluation function is " +
              "NOT reentrant... " +
              "Add the 'function.notreentrant,num'" +
              " pair (num=1 or 2) to run parameters");
        }
        // end sanity check
      }
      _incValue = ind.getValue();
      _inc = ind.getChromosome();
    }
  }


  /**
   * get the DSAThread with the given id for this object
   * @param id int
   * @return DSAThread
   */
  synchronized DSAThread getDSAThread(int id) {
    return _threads[id];
  }


  /**
   * get the best individual found so far
   * @return DSAIndividual
   */
  synchronized DSAIndividual getBestInd() {
    return _schedInc;
  }
  /**
   * set the best individual to the given argument (if better)
   * @param ind DSAIndividual
   */
  synchronized void setBestInd(DSAIndividual ind) {
    if (ind!=null && ind.getValue()<_schedVal) {
      _schedVal = ind.getValue();
      _schedInc = ind;
    }
    if (--_schedCnt==0) {  // reset when all threads send the generation's best
      _schedVal = Double.MAX_VALUE;
      // _schedInc=null;
      _schedCnt=_threads.length;
    }
  }


  /**
   * return the unique id assigned to this DSA object among all DSA objects.
   * @return int
   */
  synchronized int getId() { return _id; }


  /**
   * auxiliary method generating unique ids among this class's objects
   * @return int
   */
  synchronized private static int incrID() {
    return ++_nextId;
  }

}


/**
 * auxiliary class
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
class DSAThread extends Thread {
  private DSAThreadAux _aux;

  public DSAThread(DSA master, int id) throws OptimizerException {
    _aux = new DSAThreadAux(master, id);
  }


  public DSAThreadAux getDSAThreadAux() {
    return _aux;
  }


  public void run() {
    _aux.runTask();
  }
}


/**
 * auxiliary class
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
class DSAThreadAux {
  private int _id;
  private int _uid;
  private DSA _master;
  private boolean _finish = false;
  private DSAIndividual _individual=null;
  private Chromosome2ArgMakerIntf _c2arg=null;
  private SAScheduleIntf _sched=null;
  private int _ntriesperiter;
  private Hashtable _p=null;
  private Hashtable _fp=null;
  private FunctionIntf _f=null;

  public DSAThreadAux(DSA master, int id) throws OptimizerException {
    _master = master;
    _id = id;
    _uid = (int) DataMgr.getUniqueId();
    _p = _master.getParams();  // returns a copy
    _p.put("thread.localid",new Integer(_id));
    _p.put("thread.id",new Integer(_uid));  // used to be _id
    _f = _master.getFunction();
    // create the _funcParams
    _fp = new Hashtable();
    Iterator it = _p.keySet().iterator();
    while (it.hasNext()) {
      String key = (String) it.next();
      Object val = _p.get(key);
      if (val!=null) {
        Class valclass = val.getClass();
        Package pack = valclass.getPackage();
        if (pack!=null) {
          String packname = pack.getName();
          if (packname.startsWith("popt4jlib") ||
              packname.startsWith("parallel"))continue; // don't include such objects
        }
        else {
          Messenger.getInstance().msg("no package info for object with key "+key,2);
        }
        _fp.put(key,val);
      }
    }
    // end creating _funcParams

    _c2arg = (Chromosome2ArgMakerIntf) _p.get("dsa.c2amaker");
    if (_c2arg==null) {  // use default choice
      _c2arg = new IdentityC2ArgMaker();  // the chromosome IS the function arg.
    }
    _ntriesperiter = 100;
    Integer ntpi = (Integer) _p.get("dsa.numtriesperiter");
    if (ntpi!=null) _ntriesperiter = ntpi.intValue();
    _sched = (SAScheduleIntf) _p.get("dsa.schedule");
    if (_sched==null) _sched = new LinScaleSchedule();
  }


  public void runTask() {
    // start: do the DSA
    try {
      getInitSolution();
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    //System.err.println("initializing solution done.");
    int numiters = 100;
    Integer niI = (Integer) _p.get("dsa.numouteriters");
    if (niI!=null) numiters = niI.intValue();
    for (int gen = 0; gen < numiters; gen++) {
      //System.err.println("Island-Thread id=" + _id + " running iter=" + gen);
      if (gen>0) recvBestInd();
      parallel.Barrier.getInstance("dsa."+_master.getId()).barrier();  // synchronize with other threads
      /*
        if (_individual==null) {
          parallel.Barrier.getInstance().barrier();  // synchronize with other threads
          continue;
        }
       */
      try {
        runSA(gen);
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      sendBestInd();
      parallel.Barrier.getInstance("dsa."+_master.getId()).barrier();  // synchronize with other threads
    }
    // end: declare finish
    setFinish();
  }


  public synchronized boolean getFinish() {
    return _finish;
  }


  public synchronized void setFinish() {
    _finish = true;
    notify();
  }


  public synchronized void waitForTask() {
    while (_finish==false) {
      try {
        wait();  // wait as other operation is still running
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();  // recommended action
      }
    }
    // System.err.println("Thread-"+_id+" done.");
  }


  /* SA methods */


  private void runSA(int gen) throws OptimizerException {
    double temp = _sched.getTemp(gen, _p);
    Messenger.getInstance().msg("thread: "+_id+" gen="+gen+" temperature="+temp,1);
    NewChromosomeMakerIntf mover = (NewChromosomeMakerIntf) _p.get("dsa.movemaker");
    int accepted=0;
    int rejected=0;
    for (int i=0; i<_ntriesperiter; i++) {
      Object newsol = mover.createNewChromosome(_individual.getChromosome(), _p);
      Object newarg = _c2arg.getArg(newsol, _p);  // second arg used to be: _master.getParams()
      double newval = _f.eval(newarg, _fp);  // used to be _p, _master._f
      double df = newval - _individual.getValue();
      if (df < 0) {
        // accept immediately
        accepted++;
        _individual = new DSAIndividual(newsol, _master, _fp);  // used to be _p
        _master.setIncumbent(_individual);
      }
      else {  // see if we may accept move with certain probability
        double r = RndUtil.getInstance(_uid).getRandom().nextDouble();  // used to be _id
        if (r<=Math.exp(-df/temp)) {
          // still accept
          _individual = new DSAIndividual(newsol, _master, _fp);  // used to be _p
          accepted++;
        }
        else {
          rejected++;
        }
      }
    }
    //System.err.println("thread: "+_id+" gen="+gen+" acc="+accepted+" rej="+rejected);
  }


  private void getInitSolution() throws OptimizerException, InterruptedException {
    RandomChromosomeMakerIntf amaker = (RandomChromosomeMakerIntf) _p.get("dsa.randomchromosomemaker");
    // what to do if no such maker is provided? must have a default one
    if (amaker==null) throw new OptimizerException("no RandomChromosomeMakerIntf "+
                                                   "provided in the params Hashtable");
    Object chromosome = amaker.createRandomChromosome(_p);
    _individual = new DSAIndividual(chromosome, _master, _fp);  // used to be _p
    System.out.println("Individual="+_individual);
    _master.setIncumbent(_individual);  // update master's best soln found if needed
  }


  private synchronized void sendBestInd() {
    _master.setBestInd(_individual);
  }


  private synchronized void recvBestInd() {
    _individual = _master.getBestInd();
  }

}


/**
 * auxiliary class
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
class DSAIndividual {
  private Object _chromosome;
  private double _val=Double.MAX_VALUE;  // raw objective value
  private DSA _master;  // ref. back to master DGA object
  private FunctionIntf _f;  // ref. back to master's _f function

  public DSAIndividual(Object chromosome, DSA master, Hashtable p) throws OptimizerException {
    _chromosome = chromosome;
    _master = master;
    _f = _master.getFunction();
    computeValue(p);  // may throw OptimizerException
  }


  public DSAIndividual(Object chromosome, double val, DSA master) {
    _chromosome = chromosome;
    _val = val;
    _master = master;
  }


  public String toString() {
    String r = "Chromosome=[";
    r += _chromosome.toString();
    r += "] val="+_val;
    return r;
  }
  public Object getChromosome() { return _chromosome; }
  public double getValue() { return _val; }  // enhance the density value differences
  public void computeValue(Hashtable p) throws OptimizerException {
    if (_val==Double.MAX_VALUE) {  // don't do the computation if already done
      Chromosome2ArgMakerIntf c2amaker =
          (Chromosome2ArgMakerIntf) p.get("dsa.c2amaker");
      Object arg = null;
      if (c2amaker == null) arg = _chromosome;
      else arg = c2amaker.getArg(_chromosome, p);
      _val = _f.eval(arg, p);  // was _master._f which is also safe
    }
  }
}

