package popt4jlib.PS;

import popt4jlib.*;
import utils.*;
import java.util.*;

public class DblArray1CMaker implements RandomChromosomeMakerIntf {
  public DblArray1CMaker() {
  }


  public Object createRandomChromosome(Hashtable params) throws OptimizerException {
    try {
      final int nmax = ( (Integer) params.get("dpso.chromosomelength")).intValue();
      double maxallelevalg=Double.MAX_VALUE;
      Double maxag = (Double) params.get("dpso.maxallelevalue");
      if (maxag!=null) maxallelevalg = maxag.doubleValue();
      double minallelevalg=Double.NEGATIVE_INFINITY;
      Double minag = (Double) params.get("dpso.minallelevalue");
      if (minag!=null) minallelevalg = minag.doubleValue();
      final int id = ((Integer) params.get("thread.id")).intValue();
      double[] arr = new double[nmax];
      for (int i=0; i<nmax; i++) {
        double minalleleval = minallelevalg;
        Double minai = (Double) params.get("dpso.minalleleval"+i);
        if (minai!=null && minai.doubleValue() > minallelevalg)
          minalleleval = minai.doubleValue();
        double maxalleleval = maxallelevalg;
        Double maxai = (Double) params.get("dpso.maxalleleval"+i);
        if (maxai!=null && maxai.doubleValue() < maxallelevalg)
          maxalleleval = maxai.doubleValue();
        arr[i] = minalleleval +
            RndUtil.getInstance(id).getRandom().nextDouble()*(maxalleleval-minalleleval);
      }
      return arr;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new OptimizerException("createRandomChromosome: failed");
    }
  }
}
