package popt4jlib.GA;

import popt4jlib.*;
import utils.*;
import java.util.*;

public class DblArray1HybridDescXOverOp implements XoverOpIntf {
  static int _numFailed=0;
  static int _numSuccessful=0;

  public DblArray1HybridDescXOverOp() {
  }


  public Pair doXover(Object c1, Object c2, Hashtable params) throws OptimizerException {
    try {
      final double[] a1 = (double[]) c1;
      final double[] a2 = (double[]) c2;
      FunctionIntf f = (FunctionIntf) params.get("dga.function");
      double v1 = f.eval(a1, params);
      VectorIntf x1 = new DblArray1Vector(a1);
      double v2 = f.eval(a2, params);
      VectorIntf x2 = new DblArray1Vector(a2);
      final int n = a1.length;
      if (diffIsOK(v1,v2,params)) {
        double[] s = new double[n];
        if (v2 > v1) {
          for (int i=0; i<n; i++) s[i] = a1[i] - a2[i];
        } else {
          for (int i=0; i<n; i++) s[i] = a2[i] - a1[i];
        }
        // normalize s to be a descent direction
        double len = 0;
        for (int i=0; i<n; i++) len += s[i]*s[i];
        len = Math.sqrt(len);
        for (int i=0; i<n; i++) s[i] /= len;
        // create offspring
        double[] off1 = new double[n];
        double[] off2 = new double[n];
        double t0 = 1.e-3;
        Double t0D = (Double) params.get("dga.hybriddescxoverop.t0");
        if (t0D!=null && t0D.doubleValue()>0)
          t0 = t0D.doubleValue();
        double t0_min = 1.e-6;
        Double t0mD = (Double) params.get("dga.hybriddescxoverop.t0min");
        if (t0mD!=null && t0mD.doubleValue()>0)
          t0_min = t0mD.doubleValue();
        // work with a1 -> off1
        int count = Integer.MAX_VALUE;
        Integer cI = (Integer) params.get("dga.hybriddescxoverop.maxitercount");
        if (cI!=null && cI.intValue()>0) count = cI.intValue();
        final int nmult = 5;
        final double multfactor = 2.0;
        double f1 = v1;
        double[] x = x1.getDblArray1();
        int i=0;
        while (--count>0) {
          add(x, s, t0, off1);
          if (isFeasiblePoint(off1, params)==false) {
            t0 /= multfactor;
            if (t0<t0_min) break;
            continue;
          }
          double fval = f.eval(off1, params);
          if (fval < f1) {
            for (int j=0; j<n; j++) x[j] = off1[j];  // x = off1
            f1 = fval;  // set incumbent
            if (++i==nmult) {
              i=0;
              t0 *= multfactor;  // increment step-size
            }
          } else {  // failure
            t0 /= multfactor;  // decrement
            if (t0<t0_min) break;
          }
        }
        for (int j=0; j<n; j++) off1[j] = x[j];  // set off1 appropriately
        // work with a2 -> off2
        double f2 = v2;
        x = x2.getDblArray1();
        i=0;
        count = Integer.MAX_VALUE;
        if (cI!=null && cI.intValue()>0) count = cI.intValue();
        t0 = 1.e-3;
        if (t0D!=null && t0D.doubleValue()>0)
          t0 = t0D.doubleValue();
        while (--count>0) {
          add(x, s, t0, off2);
          if (isFeasiblePoint(off2, params)==false) {
            t0 /= multfactor;
            if (t0<t0_min) break;
            continue;
          }
          double fval = f.eval(off2, params);
          if (fval < f2) {
            for (int j=0; j<n; j++) x[j] = off2[j];  // x = off2
            f2 = fval;  // set incumbent
            if (++i==nmult) {
              i=0;
              t0 *= multfactor;  // increment step-size
            }
          } else {  // failure
            t0 /= multfactor;
            if (t0<t0_min) break;
          }
        }
        for (int j=0; j<n; j++) off2[j] = x[j];  // set off2 appropriately

        Pair p = new Pair(off1, off2);
        return p;
      }
      else { // do std 1-pt cross-over
        // create offspring
        double[] off1 = new double[n];
        double[] off2 = new double[n];
        final int id = ( (Integer) params.get("thread.id")).intValue();
        int xoverind = RndUtil.getInstance(id).getRandom().nextInt(a1.length);
        for (int i = 0; i < n; i++) {
          if (i <= xoverind) {
            off1[i] = a1[i];
            off2[i] = a2[i];
          }
          else {
            off1[i] = a2[i];
            off2[i] = a1[i];
          }
        }
        return new Pair(off1, off2);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new OptimizerException("doXover(): failed");
    }
  }


  private synchronized static void incrFailed() {
    ++_numFailed;
    if (_numFailed % 100 == 0) {
      int ok = getNumSuccessful();
      Messenger.getInstance().msg("DblArray1HybridDescXOverOp: XOvers OK: "+ok+" Failed: "+_numFailed,1);
    }
  }
  private synchronized static void incrSuccessful() { ++_numSuccessful; }
  private synchronized static int getNumSuccessful() { return _numSuccessful; }


  private boolean diffIsOK(double v1, double v2, Hashtable params) {
    double minaccperc = 0.01;
    Double mapD = (Double) params.get("dga.graddescxoverop.minaccvaldiffperc");
    if (mapD!=null && mapD.doubleValue()>0)
      minaccperc = mapD.doubleValue();
    if (Math.min(v1,v2)==0) return Math.max(v1,v2)>minaccperc;  // avoid division by zero
    return Math.abs((v1-v2)/Math.min(v1,v2)) > minaccperc;
  }


  private boolean isFeasiblePoint(double[] x, Hashtable params) {
    double minargval = Double.NEGATIVE_INFINITY;
    Double mavD = (Double) params.get("dga.minallelevalue");
    if (mavD!=null) minargval = mavD.doubleValue();
    double maxargval = Double.POSITIVE_INFINITY;
    Double MavD = (Double) params.get("dga.maxallelevalue");
    if (MavD!=null) maxargval = MavD.doubleValue();
    final int n = x.length;
    for (int j=0; j<n; j++) {
      // compute xj limits
      double minaj = minargval;
      Double majD = (Double) params.get("dga.minallelevalue"+j);
      if (majD!=null && majD.doubleValue()>minaj) minaj = majD.doubleValue();
      double maxaj = maxargval;
      Double MajD = (Double) params.get("dga.maxallelevalue"+j);
      if (MajD!=null && MajD.doubleValue()<maxaj) maxaj = MajD.doubleValue();
      if (minaj > x[j] || x[j] > maxaj) return false;
    }
    return true;
  }


  private void add(double[] a, double[] s, double t, double[] off) {
    final int n = a.length;
    for (int i=0; i<n; i++) off[i] = a[i]+t*s[i];
  }

}
