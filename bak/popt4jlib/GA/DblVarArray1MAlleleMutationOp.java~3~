package popt4jlib.GA;

import popt4jlib.OptimizerException;
import utils.*;
import java.util.*;

public class DblVarArray1MAlleleMutationOp implements MutationOpIntf {

  public DblVarArray1MAlleleMutationOp() {
  }

  /**
   * the operation mutates each chromosome argument (not a DGAIndividual, not a
   * Function() arg object) and stores the new chromosome in a Pair object that
   * is returned.
   * @param chromosome1 Object
   * @param chromosome2 Object
   * @param params Hashtable
   * @throws OptimizerException
   * @return Pair
   */
  public Pair doMutation(Object chromosome1, Object chromosome2, Hashtable params) throws OptimizerException {
    try {
      final int id = ( (Integer) params.get("thread.id")).intValue();
      double[] a1 = (double[]) chromosome1;
      double[] a2 = (double[]) chromosome2;
      double min = Double.MAX_VALUE;
      double max = Double.NEGATIVE_INFINITY;
      double mut_rate = 0.1;  // default value
      Double mrD = (Double) params.get("dga.mutoprate");
      if (mrD!=null && mrD.doubleValue()>=0 && mrD.doubleValue()<=1)
        mut_rate = mrD.doubleValue();
      int n1 = a1.length;
      double n1m = RndUtil.getInstance(id).getRandom().nextDouble()*mut_rate*n1;
      int n1_mutations = (int) Math.ceil(n1m);
      for (int i = 0; i < n1; i++) {
        if (max < a1[i]) max = a1[i];
        else if (min > a1[i]) min = a1[i];
      }
      // check if value exceeds any limits
      Double minargval = (Double) params.get("dga.minallelevalue");
      Double maxargval = (Double) params.get("dga.maxallelevalue");
      for (int j=0; j<n1_mutations; j++) {
        int r1 = RndUtil.getInstance(id).getRandom().nextInt(n1);
        double rv = RndUtil.getInstance(id).getRandom().nextGaussian();
        a1[r1] += (max - min) * rv;
        if (minargval != null && minargval.doubleValue() > a1[r1])
          a1[r1] = minargval.doubleValue();
        Double minargvalr1 = (Double) params.get("dga.minallelevalue" + r1);
        if (minargvalr1 != null && minargvalr1.doubleValue() > a1[r1])
          a1[r1] = minargvalr1.doubleValue();

        if (maxargval != null && maxargval.doubleValue() < a1[r1])
          a1[r1] = maxargval.doubleValue();
        Double maxargvalr1 = (Double) params.get("dga.maxallelevalue" + r1);
        if (maxargvalr1 != null && maxargvalr1.doubleValue() < a1[r1])
          a1[r1] = maxargvalr1.doubleValue();
      }

      int n2 = a2.length;
      double n2m = RndUtil.getInstance(id).getRandom().nextDouble()*mut_rate*n2;
      int n2_mutations = (int) Math.ceil(n2m);
      for (int i = 0; i < n2; i++) {
        if (max < a2[i]) max = a2[i];
        else if (min > a2[i]) min = a2[i];
      }
      for (int j=0; j<n2_mutations; j++) {
        int r2 = RndUtil.getInstance(id).getRandom().nextInt(n2);
        double rv = RndUtil.getInstance(id).getRandom().nextGaussian();
        a2[r2] += (max - min) * rv;
        if (minargval != null && minargval.doubleValue() > a2[r2])
          a2[r2] = minargval.doubleValue();
        Double minargvalr2 = (Double) params.get("dga.minallelevalue" + r2);
        if (minargvalr2 != null && minargvalr2.doubleValue() > a2[r2])
          a2[r2] = minargvalr2.doubleValue();

        if (maxargval != null && maxargval.doubleValue() < a2[r2])
          a2[r2] = maxargval.doubleValue();
        Double maxargvalr2 = (Double) params.get("dga.maxallelevalue" + r2);
        if (maxargvalr2 != null && maxargvalr2.doubleValue() < a2[r2])
          a2[r2] = maxargvalr2.doubleValue();
      }

      Pair p = new Pair(a1, a2);
      return p;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new OptimizerException("doMutation(): failed");
    }
  }

}
