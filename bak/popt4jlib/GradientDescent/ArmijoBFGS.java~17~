package popt4jlib.GradientDescent;

import java.util.*;
import cern.colt.matrix.*;
import cern.jet.math.*;
import cern.colt.matrix.impl.*;
import utils.*;
import popt4jlib.*;

public class ArmijoBFGS implements LocalOptimizerIntf {
  Hashtable _params;
  private double _incValue=Double.MAX_VALUE;
  private VectorIntf _inc=null;  // incumbent vector
  FunctionIntf _f;
  private ABFGSThread[] _threads=null;


  public ArmijoBFGS() {
  }

  public ArmijoBFGS(Hashtable params) {
    try {
      setParams(params);
    }
    catch (Exception e) {
      // no-op: cannot reach this point
    }
  }


  public LocalOptimizerIntf newInstance() {
    return new ArmijoBFGS();
  }


  /**
   * return a copy of the parameters. Modifications to the returned object
   * do not affect the data member.
   * @return Hashtable
   */
  public synchronized Hashtable getParams() {
    return new Hashtable(_params);
  }


  /**
   * the optimization params are set to p
   * @param p Hashtable
   * @throws OptimizerException
   */
  public synchronized void setParams(Hashtable p) throws OptimizerException {
    if (_f!=null) throw new OptimizerException("cannot modify parameters while running");
    _params = null;
    _params = new Hashtable(p);  // own the params
  }


  public PairObjDouble minimize(FunctionIntf f) throws OptimizerException {
    try {
      synchronized (this) {
        if (_f != null)
          throw new OptimizerException("ArmijoBFGS.minimize(): " +
                                       "another thread is concurrently executing the method on the same object");
        _f = f;
      }
      int numthreads = 1;
      Integer ntI = (Integer) _params.get("abfgs.numthreads");
      if (ntI != null && ntI.intValue() > 1) numthreads = ntI.intValue();
      _threads = new ABFGSThread[numthreads];
      Integer ntriesI = (Integer) _params.get("abfgs.numtries");
      int ntries = ntriesI.intValue();
      int triesperthread = ntries / numthreads;
      int rem = ntries;
      for (int i = 0; i < numthreads - 1; i++) {
        _threads[i] = new ABFGSThread(i, triesperthread, this);
        rem -= triesperthread;
      }
      _threads[numthreads - 1] = new ABFGSThread(numthreads - 1, rem, this);
      for (int i = 0; i < numthreads; i++) {
        _threads[i].start();
      }
      // wait until all threads finish
      for (int i=0; i<numthreads; i++) {
        try {
          _threads[i].join();
        }
        catch (InterruptedException e) {
          Thread.currentThread().interrupt(); // recommended action
        }
      }
      if (_inc == null) // didn't find a solution
        throw new OptimizerException("failed to find solution");
      // ok, we're done
      PairObjDouble pr = new PairObjDouble(_inc, _incValue);
      return pr;
    }
    finally {
      _f = null;
    }
  }


  public PairObjDouble min(FunctionIntf f, int solindex) throws OptimizerException {
    VecFunctionIntf grad = (VecFunctionIntf) _params.get("abfgs.gradient");
    if (grad==null) grad = new GradApproximator(f);  // default: numeric computation of gradient
    final VectorIntf x0 = _params.get("abfgs.x"+solindex) == null ?
                          (VectorIntf) _params.get("gradientdescent.x0") :  // attempt to retrieve generic point
                          (VectorIntf) _params.get("abfgs.x"+solindex);
    if (x0==null) throw new OptimizerException("no abfgs.x"+solindex+" initial point in _params passed");
    VectorIntf x = x0.newCopy();  // don't modify the initial soln
    final int n = x.getNumCoords();
    double gtol = 1e-6;
    Double gtolD = (Double) _params.get("abfgs.gtol");
    if (gtolD!=null && gtolD.doubleValue()>0) gtol = gtolD.doubleValue();
    double fx = Double.NaN;
    int maxiters = Integer.MAX_VALUE;
    Integer miI = (Integer) _params.get("abfgs.maxiters");
    if (miI!=null && miI.intValue()>0)
      maxiters = miI.intValue();
    boolean found=false;
    DoubleMatrix2D G = new cern.colt.matrix.impl.DenseDoubleMatrix2D(n, n);
    // G is initially zero matrix
    for (int i=0; i<n; i++) G.setQuick(i,i,1.0);
    // G is the Identity matrix
    // BFGS loop
    for (int iter=0; iter<maxiters; iter++) {
      VectorIntf g = grad.eval(x, _params);
      fx = _f.eval(x, _params);
      double norminfg = VecUtil.normInfinity(g);
      if (norminfg <= gtol) {
        Messenger.getInstance().msg("found sol w/ normg="+norminfg+" in "+iter+" iterations.",0);
        found = true;
        break;
      }
      double[] xa = new double[n];
      for (int i=0; i<n; i++) xa[i] = x.getCoord(i);
      DoubleMatrix1D gk = new DenseDoubleMatrix1D(g.getDblArray1());
      DoubleMatrix1D sk = G.zMult(gk,null);
      for (int i=0; i<n; i++) sk.setQuick(i, -sk.getQuick(i));
      // find h
      double hk = min1D(f, x, x.newInstance(sk.toArray()));
      // compute delta
      DoubleMatrix1D d = new DenseDoubleMatrix1D(n);
      for (int i=0; i<n; i++) d.setQuick(i, hk*sk.getQuick(i));
      // compute new x
      for (int i=0; i<n; i++) x.setCoord(i, x.getCoord(i)+hk*sk.getQuick(i));
      // compute gamma
      VectorIntf gx = grad.eval(x, _params);
      DoubleMatrix1D gm = new DenseDoubleMatrix1D(gx.getDblArray1());
      for (int i=0; i<n; i++) gm.setQuick(i,gm.getQuick(i)-g.getCoord(i));
      // compute gamma'delta
      double gTd = gm.zDotProduct(d);
      // compute gamma'Ggamma
      DoubleMatrix1D Ggamma = G.zMult(gm,null);
      double gTGg = Ggamma.zDotProduct(gm);
      // compute first factor
      double f1 = (1 + gTGg/gTd)/gTd;
      DoubleMatrix2D d2 = new DenseDoubleMatrix2D(n,1);
      for (int i=0; i<n; i++) d2.setQuick(i,0,d.getQuick(i));
      DoubleMatrix2D ddT = d2.zMult(d2,null,1,0,true,false);
      Mult mult = Mult.mult(f1);
      ddT.assign(mult);
      // compute dgTG
      DoubleMatrix2D gm2 = new DenseDoubleMatrix2D(n,1);
      for (int i=0; i<n; i++) gm2.setQuick(i,0,gm.getQuick(i));
      DoubleMatrix2D dgT = d2.zMult(gm2,null,1,0,true,false);
      DoubleMatrix2D dgTG = dgT.zMult(G,null);
      // compute G3 = -(GgdT+dgTG)/gTd
      DoubleMatrix2D GgdT = G.zMult(dgT,null,1,0,true,false);
      PlusMult pmult = PlusMult.plusMult(1);
      dgTG.assign(GgdT,pmult);  // dgTG is now dgTG + GgdT
      Mult divgTd = Mult.div(-gTd);
      dgTG.assign(divgTd);
      // compute G + f1*ddT + G3
      G.assign(ddT,pmult);
      G.assign(dgTG,pmult);
    }
    if (found) return new PairObjDouble(x, fx);
    else throw new OptimizerException("Thread did not find a solution"+
                                      " satisfying tolerance criteria from "+
                                      "the given initial point.");
  }


  synchronized void setIncumbent(VectorIntf arg, double val) throws OptimizerException {
    if (val<_incValue) {
      if (Debug.debug(popt4jlib.Constants.ABFGS)!=0) {
        // sanity check
        double incval = _f.eval(arg, _params);
        if (Math.abs(incval - _incValue) > 1.e-25) {
          Messenger.getInstance().msg("ABFGS.setIncumbent(): arg-val originally=" +
                                      _incValue + " fval=" + incval + " ???", 0);
          throw new OptimizerException(
              "ABFGS.setIncumbent(): insanity detected; " +
              "most likely evaluation function is " +
              "NOT reentrant... " +
              "Add the 'function.notreentrant,num'" +
              " pair (num=1 or 2) to run parameters");
        }
        // end sanity check
      }

      _incValue=val;
      _inc=arg;
    }
  }


  private double min1D(FunctionIntf f, VectorIntf x, VectorIntf s) throws OptimizerException {
    VecFunctionIntf grad = (VecFunctionIntf) _params.get("abfgs.gradient");
    if (grad==null) grad = new GradApproximator(f);  // default: numeric computation of gradient
    final int n = x.getNumCoords();
    double h=0;
    double rho = 0.1;
    Double rD = (Double) _params.get("abfgs.rho");
    if (rD!=null && rD.doubleValue()>0)
      rho = rD.doubleValue();
    double beta = 0.2;
    Double bD = (Double) _params.get("abfgs.beta");
    if (bD!=null && bD.doubleValue()>0)
      beta = bD.doubleValue();
    double gamma = 1;
    Double gD = (Double) _params.get("abfgs.gamma");
    if (gD!=null && gD.doubleValue()>0)
      gamma = gD.doubleValue();
    double fx = Double.NaN;
    int maxiters = Integer.MAX_VALUE;
    Integer miI = (Integer) _params.get("abfgs.maxarmijoiters");
    if (miI!=null && miI.intValue()>0)
      maxiters = miI.intValue();
    boolean found=false;
    VectorIntf g = grad.eval(x, _params);
    fx = _f.eval(x, _params);
    double[] xa = new double[n];
    for (int i=0; i<n; i++) xa[i] = x.getCoord(i);
    // Armijo Rule implementation
    // determine step-size h
    double rprev = rho*gamma*innerProd(s,g);
    //System.err.println(iter+" iter, now computing h");
    for (int m=0; m<maxiters; m++) {
      for (int i=0; i<n; i++) x.setCoord(i, xa[i]+Math.pow(beta,m)*gamma*s.getCoord(i));
      double fval = _f.eval(x,_params);
      if (fval <= fx + rprev) {
        h = Math.pow(beta,m)*gamma;
        found=true;
        break;
      }
      rprev = beta*rprev;
    }
    if (found) return h;
    else throw new OptimizerException("Thread did not find a minimizer"+
                                      " of the 1-D problem using "+
                                      "the Armijo Rule.");
  }


  private double innerProd(VectorIntf x, VectorIntf y) throws IllegalArgumentException {
    if (x==null || y==null) throw new IllegalArgumentException("null args passed");
    if (x.getNumCoords()!=y.getNumCoords()) throw new IllegalArgumentException("args have different dimensions");
    double res = 0.0;
    final int n = x.getNumCoords();
    for (int i=0; i<n; i++) res += x.getCoord(i)*y.getCoord(i);
    return res;
  }

}


class ABFGSThread extends Thread {

  private ArmijoBFGS _master;
  private int _numtries;
  private int _id;
  private int _uid;

  public ABFGSThread(int id, int numtries, ArmijoBFGS master) {
    _id = id;
    _uid = (int) DataMgr.getUniqueId();
    _master=master;
    _numtries=numtries;
  }

  public void run() {
    Hashtable p = new Hashtable(_master._params);
    p.put("thread.id", new Integer(_uid));  // used to be _id
    VectorIntf best = null;
    double bestval = Double.MAX_VALUE;
    FunctionIntf f = _master._f;
    for (int i=0; i<_numtries; i++) {
      try {
        int index = _id*_numtries+i;  // this is the starting point soln index
        PairObjDouble pair = _master.min(f, index);
        double val = pair.getDouble();
        if (val<bestval) {
          bestval=val;
          best=(VectorIntf) pair.getArg();
        }
      }
      catch (Exception e) {
        e.printStackTrace();
        // no-op
      }
    }
    try {
      _master.setIncumbent(best, bestval);
    }
    catch (OptimizerException e) {
      e.printStackTrace();
    }
  }
}
