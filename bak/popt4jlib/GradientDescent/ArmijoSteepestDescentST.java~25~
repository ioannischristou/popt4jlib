package popt4jlib.GradientDescent;

import java.util.*;
import utils.*;
import parallel.*;
import popt4jlib.*;

/**
 * Single-Threaded version of the ArmijoSteepestDescent class that implements a
 * single try, single threaded local optimization from a single initial point
 * to a local stationary point of the function to be optimized.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class ArmijoSteepestDescentST implements LocalOptimizerIntf, ObserverIntf {
  Hashtable _params;
  FunctionIntf _f;


  /**
   * public no-arg constructor
   */
  public ArmijoSteepestDescentST() {
    // no-op
  }


  /**
   * public constructor accepting the optimization parameters to the process.
   * The parameters are copied so that later modifications to the input argument
   * do not affect the parameters passed in.
   * @param params Hashtable
   */
  public ArmijoSteepestDescentST(Hashtable params) {
    try {
      setParams(params);
    }
    catch (Exception e) {
      // no-op: cannot reach this point
    }
  }


  /**
   * return a copy of the parameters. Modifications to the returned object
   * do not affect the data member.
   * @return Hashtable
   */
  public synchronized Hashtable getParams() {
    return new Hashtable(_params);
  }


  /**
   * return an empty (no parameters) object of this class.
   * @return LocalOptimizerIntf
   */
  public LocalOptimizerIntf newInstance() {
    return new ArmijoSteepestDescentST();
  }


  /**
   * the optimization params are set to p
   * @param p Hashtable
   * @throws OptimizerException if another thread is concurrently running the
   * <CODE>minimize(f)</CODE> method of this object.
   */
  public synchronized void setParams(Hashtable p) throws OptimizerException {
    if (_f!=null) throw new OptimizerException("cannot modify parameters while running");
    _params = null;
    _params = new Hashtable(p);  // own the params
  }


  /**
   * the main method of the class. Before it is called, a number of parameters
   * must have been set (via the parameters passed in the constructor, or via
   * a later call to setParams(p). These are:
   * <"asd.gradient", VecFunctionIntf g> optional, the gradient of f, the
   * function to be minimized. If this param-value pair does not exist, the
   * gradient will be computed using Richardson finite differences extrapolation
   * <"asd.gtol", Double v> optional, the minimum abs. value for each of the
   * gradient's coordinates, below which if all coordinates of the gradient
   * happen to be, the search stops assuming it has reached a stationary point.
   * Default is 1.e-6.
   * <"asd.maxiters", Integer miters> optional, the maximum number of major
   * iterations of the SD search before the algorithm stops. Default is
   * Integer.MAX_VALUE.
   * <"asd.rho", Double v> optional, the value for the parameter ñ in the
   * Armijo rule implementation. Default is 0.1.
   * <"asd.beta", Double v> optional, the value for the parameter â in the
   * Armijo rule implementation. Default is 0.8.
   * <"asd.gamma", Double v> optional, the value for the parameter ã in the
   * Armijo rule implementation. Default is 1.
   * <"asd.looptol", Double v> optional, the minimum step-size allowed. Default
   * is 1.e-21.
   *
   * @param f FunctionIntf the function to minimize
   * @throws OptimizerException if another thread is currently executing the
   * same method or if the method fails to find a minimizer
   * @return PairObjDouble the pair containing the arg. min (a VectorIntf) and
   * the min. value found
   */

  public PairObjDouble minimize(FunctionIntf f) throws OptimizerException {
    try {
      synchronized (this) {
        if (_f != null)
          throw new OptimizerException("ASDST.minimize(): another thread is " +
                                       "concurrently executing the method on the same object");
        _f = f;
      }
      PairObjDouble pr = min(f, _params);
      return pr;
    }
    finally {
      _f = null;
    }
  }


  // ObserverIntf methods implementation
  /**
   * when a subject's thread calls the method notifyChange, in response, this
   * object will call its minimize() method, and add the result back into the
   * subject object.
   * @param subject SubjectIntf
   * @throws OptimizerException
   */
  public void notifyChange(SubjectIntf subject) throws OptimizerException {
    try {
      DMCoordinator.getInstance("popt4jlib").getWriteAccess();
      Object arg = subject.getIncumbent();
      FunctionIntf f = subject.getFunction();
      VectorIntf x=null;
      if (arg instanceof double[]) {
        x = new DblArray1Vector((double[]) arg);
      } else if (arg instanceof VectorIntf) x = (DblArray1Vector) arg;
      else throw new OptimizerException("ASDST.notifyChange(): don't know how to convert argument into VectorIntf object");
      Hashtable params = subject.getParams();
      params.put("gradientdescent.x0",x);  // add the initial point
      setParams(params);  // set the params of this object
      PairObjDouble p = minimize(f);
      if (p!=null) {
        VectorIntf argmin = (VectorIntf) p.getArg();
        if (arg instanceof DblArray1Vector) subject.addIncumbent(this, argmin);
        else subject.addIncumbent(this, argmin.getDblArray1());
      }
    }
    catch (ParallelException e) {
      e.printStackTrace();
    }
    finally {
      try {
        DMCoordinator.getInstance("popt4jlib").releaseWriteAccess();
      }
      catch (ParallelException e) {
        e.printStackTrace();
      }
    }
  }


  /**
   * the implementation of the Steepest-Descent method with Armijo rule for
   * step-size determination
   * @param f FunctionIntf the function to optimize
   * @param p Hashtable the optimization and function parameters
   * @throws OptimizerException if the optimization process fails to find a
   * (near-)stationary point
   * @return PairObjDouble the argmin and min value found
   */
  private PairObjDouble min(FunctionIntf f, Hashtable p) throws OptimizerException {
    VecFunctionIntf grad = (VecFunctionIntf) p.get("asd.gradient");
    if (grad==null) grad = new GradApproximator(f);  // default: numeric computation of gradient
    final VectorIntf x0 = p.get("asd.x0") == null ?
                          (VectorIntf) p.get("gradientdescent.x0") :  // attempt to retrieve generic point
                          (VectorIntf) p.get("asd.x0");
    if (x0==null) throw new OptimizerException("no asd.x0"+" initial point in _params passed");
    VectorIntf x = x0.newCopy();  // don't modify the initial soln
    final int n = x.getNumCoords();
    final double f0 = f.eval(x0, p);
    double gtol = 1e-6;
    Double gtolD = (Double) p.get("asd.gtol");
    if (gtolD!=null && gtolD.doubleValue()>0) gtol = gtolD.doubleValue();
    double h=0;
    double rho = 0.1;
    Double rD = (Double) p.get("asd.rho");
    if (rD!=null && rD.doubleValue()>0)
      rho = rD.doubleValue();
    double beta = 0.8;
    Double bD = (Double) p.get("asd.beta");
    if (bD!=null && bD.doubleValue()>0 && bD.doubleValue()<1)
      beta = bD.doubleValue();
    double gamma = 1.0;
    Double gD = (Double) p.get("asd.gamma");
    if (gD!=null && gD.doubleValue()>0)
      gamma = gD.doubleValue();
    double fx = Double.NaN;
    int maxiters = Integer.MAX_VALUE;
    Integer miI = (Integer) p.get("asd.maxiters");
    if (miI!=null && miI.intValue()>0)
      maxiters = miI.intValue();
    double looptol = 1.e-21;
    Double ltD = (Double) p.get("asd.looptol");
    if (ltD!=null && ltD.doubleValue() > 0) looptol = ltD.doubleValue();
    boolean found=false;
    for (int iter=0; iter<maxiters; iter++) {
      h=0;
      VectorIntf g = grad.eval(x, p);
      fx = _f.eval(x, p);
      final double norminfg = VecUtil.normInfinity(g);
      final double normg = VecUtil.norm(g,2);
      if (norminfg <= gtol) {
        Messenger.getInstance().msg("found sol w/ norminfg="+norminfg+" in "+iter+" iterations.",0);
        found = true;
        break;
      }
      VectorIntf s = g.newCopyMultBy(-1.0/normg);  // normalize s
      double[] xa = new double[n];
      for (int i=0; i<n; i++) xa[i] = x.getCoord(i);
      // Armijo Rule implementation
      // determine step-size h
      double rprev = -rho*gamma*normg;
      int m=0;
      while (rprev < -looptol) {
        for (int i=0; i<n; i++) x.setCoord(i, xa[i]+Math.pow(beta,m)*gamma*s.getCoord(i));
        double fval = _f.eval(x,p);
        if (fval <= fx + rprev) {
          h = Math.pow(beta,m)*gamma;
          fx = fval;
          break;
        }
        rprev = beta*rprev;
        m++;
      }
      if (h<=0) throw new OptimizerException("ASDST could not find a valid h for x="+x+" after "+m+" iterations...");
      // set new x
      for (int i=0; i<n; i++) x.setCoord(i, xa[i] + h*s.getCoord(i));
    }
    if (found) return new PairObjDouble(x, fx);
    else if (fx < f0) {
      double imprv = fx==0 ? Double.MAX_VALUE : 100.0*(f0-fx)/Math.abs(fx);
      Messenger.getInstance().msg("ArmijoSteepestDescentST didn't find a "+
                                  "stationary point but improved "+imprv+
                                  "% upon init. soln",0);
      return new PairObjDouble(x, fx);
    }
    else throw new OptimizerException("Thread did not find a solution"+
                                      " satisfying tolerance criteria from "+
                                      "the given initial point x0="+x0);
  }

}

