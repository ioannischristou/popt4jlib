package popt4jlib.GradientDescent;

import java.util.*;
import utils.*;
import popt4jlib.*;

public class ArmijoSteepestDescent implements LocalOptimizerIntf {
  Hashtable _params;
  private double _incValue=Double.MAX_VALUE;
  private VectorIntf _inc=null;  // incumbent vector
  FunctionIntf _f;
  private ASDThread[] _threads=null;
  private int _numOK=0;
  private int _numFailed=0;

  public ArmijoSteepestDescent() {
  }

  public ArmijoSteepestDescent(Hashtable params) {
    try {
      setParams(params);
    }
    catch (Exception e) {
      // no-op: cannot reach this point
    }
  }


  /**
   * return a copy of the parameters. Modifications to the returned object
   * do not affect the data member.
   * @return Hashtable
   */
  public synchronized Hashtable getParams() {
    return new Hashtable(_params);
  }


  public LocalOptimizerIntf newInstance() {
    return new ArmijoSteepestDescent();
  }


  /**
   * the optimization params are set to p
   * @param p Hashtable
   * @throws OptimizerException
   */
  public synchronized void setParams(Hashtable p) throws OptimizerException {
    if (_f!=null) throw new OptimizerException("cannot modify parameters while running");
    _params = null;
    _params = new Hashtable(p);  // own the params
  }


  public PairObjDouble minimize(FunctionIntf f) throws OptimizerException {
    try {
      synchronized (this) {
        if (_f != null)
          throw new OptimizerException("ASD.minimize(): " +
                                       "another thread is concurrently executing the method on the same object");
        _f = f;
      }
      int numthreads = 1;
      Integer ntI = (Integer) _params.get("asd.numthreads");
      if (ntI != null && ntI.intValue() > 1) numthreads = ntI.intValue();
      _threads = new ASDThread[numthreads];
      int ntries = 1;
      Integer ntriesI = (Integer) _params.get("asd.numtries");
      if (ntriesI != null && ntriesI.intValue() > 1) ntries = ntriesI.intValue();
      int triesperthread = ntries / numthreads;
      int rem = ntries;
      for (int i = 0; i < numthreads - 1; i++) {
        _threads[i] = new ASDThread(i, triesperthread, this);
        rem -= triesperthread;
      }
      _threads[numthreads - 1] = new ASDThread(numthreads - 1, rem, this);
      for (int i = 0; i < numthreads; i++) {
        _threads[i].start();
      }
      // wait until all threads finish
      for (int i=0; i<numthreads; i++) {
        try {
          _threads[i].join();
        }
        catch (InterruptedException e) {
          Thread.currentThread().interrupt(); // recommended action
        }
      }
      if (_inc == null) // didn't find a solution
        throw new OptimizerException("failed to find solution");
      // ok, we're done
      PairObjDouble pr = new PairObjDouble(_inc, _incValue);
      return pr;
    }
    finally {
      _f = null;
    }
  }


  public synchronized int getNumOK() { return _numOK; }
  public synchronized int getNumFailed() { return _numFailed; }


  synchronized void setIncumbent(VectorIntf arg, double val) throws OptimizerException {
    if (val<_incValue) {
      Messenger.getInstance().msg("update incumbent w/ new best value="+val,0);
      if (Debug.debug(Constants.ASD)!=0) {
        // sanity check
        double incval = _f.eval(arg, _params);
        if (Math.abs(incval - _incValue) > 1.e-25) {
          Messenger.getInstance().msg("ASD.setIncumbent(): arg-val originally=" +
                                      _incValue + " fval=" + incval + " ???", 0);
          throw new OptimizerException(
              "ASD.setIncumbent(): insanity detected; " +
              "most likely evaluation function is " +
              "NOT reentrant... " +
              "Add the 'function.notreentrant,num'" +
              " pair (num=1 or 2) to run parameters");
        }
        // end sanity check
      }

      _incValue=val;
      _inc=arg;
    }
  }


  synchronized void incOK() { _numOK++; }
  synchronized void incFailed() { _numFailed++; }

}


class ASDThread extends Thread {

  private ArmijoSteepestDescent _master;
  private int _numtries;
  private int _id;

  public ASDThread(int id, int numtries, ArmijoSteepestDescent master) {
    _id = id;
    _master=master;
    _numtries=numtries;
  }

  public void run() {
    Hashtable p = new Hashtable(_master._params);
    p.put("thread.id", new Integer(_id));
    VectorIntf best = null;
    double bestval = Double.MAX_VALUE;
    FunctionIntf f = _master._f;
    for (int i=0; i<_numtries; i++) {
      try {
        int index = _id*_numtries+i;  // this is the starting point soln index
        PairObjDouble pair = min(f, index, p);
        double val = pair.getDouble();
        if (val<bestval) {
          bestval=val;
          best=(VectorIntf) pair.getArg();
        }
        _master.incOK();
      }
      catch (Exception e) {
        _master.incFailed();
        e.printStackTrace();
        // no-op
      }
    }
    try {
      _master.setIncumbent(best, bestval);
    }
    catch (OptimizerException e) {
      e.printStackTrace();
    }
  }


  private PairObjDouble min(FunctionIntf f, int solindex, Hashtable p) throws OptimizerException {
    VecFunctionIntf grad = (VecFunctionIntf) p.get("asd.gradient");
    if (grad==null) grad = new GradApproximator(f);  // default: numeric computation of gradient
    final VectorIntf x0 = p.get("asd.x"+solindex) == null ?
                          (VectorIntf) p.get("gradientdescent.x0") :  // attempt to retrieve generic point
                          (VectorIntf) p.get("asd.x"+solindex);
    if (x0==null) throw new OptimizerException("no asd.x"+solindex+" initial point in _params passed");
    VectorIntf x = x0.newCopy();  // don't modify the initial soln
    final int n = x.getNumCoords();
    double gtol = 1e-8;
    Double gtolD = (Double) p.get("asd.gtol");
    if (gtolD!=null && gtolD.doubleValue()>0) gtol = gtolD.doubleValue();
    double h=0;
    double rho = 0.1;
    Double rD = (Double) p.get("asd.rho");
    if (rD!=null && rD.doubleValue()>0)
      rho = rD.doubleValue();
    double beta = 0.8;
    Double bD = (Double) p.get("asd.beta");
    if (bD!=null && bD.doubleValue()>0 && bD.doubleValue()<1)
      beta = bD.doubleValue();
    double gamma = 1.0;
    Double gD = (Double) p.get("asd.gamma");
    if (gD!=null && gD.doubleValue()>0)
      gamma = gD.doubleValue();
    double fx = Double.NaN;
    int maxiters = Integer.MAX_VALUE;
    Integer miI = (Integer) p.get("asd.maxiters");
    if (miI!=null && miI.intValue()>0)
      maxiters = miI.intValue();
    double looptol = 1.e-21;
    Double ltD = (Double) p.get("asd.looptol");
    if (ltD!=null && ltD.doubleValue() > 0) looptol = ltD.doubleValue();
    boolean found=false;

    // main iteration loop
    VectorIntf g = grad.eval(x, p);
    double normg = VecUtil.norm(g,2);
    fx = _master._f.eval(x, p);
    VectorIntf s = g.newCopyMultBy(-1.0/normg);  // normalize s
    double[] xa = new double[n];
    for (int iter=0; iter<maxiters; iter++) {
      h=0;
      final double norminfg = VecUtil.normInfinity(g);
      if (norminfg <= gtol) {
        Messenger.getInstance().msg("found sol w/ norminfg="+norminfg+" in "+iter+" iterations.",0);
        found = true;
        break;
      }
      for (int i=0; i<n; i++) xa[i] = x.getCoord(i);
      // Armijo Rule implementation
      // determine step-size h
      double rprev = -rho*gamma*normg;
      int m=0;
      double fval=fx;
      while (rprev < -looptol) {
        for (int i=0; i<n; i++) x.setCoord(i, xa[i]+Math.pow(beta,m)*gamma*s.getCoord(i));
        fval = _master._f.eval(x,p);
        if (fval <= fx + rprev) {
          h = Math.pow(beta,m)*gamma;
          break;
        }
        rprev = beta*rprev;
        m++;
      }
      if (h<=0) throw new OptimizerException("ASD could not find a valid h from x="+
                                             x+" after "+m+" iterations...");
      // set new x, fx, g, normg, s
      for (int i=0; i<n; i++) x.setCoord(i, xa[i] + h*s.getCoord(i));
      fx = fval;
      g = grad.eval(x,p);
      normg = VecUtil.norm2(g);
      for (int i=0; i<n; i++) s.setCoord(i, -g.getCoord(i)/normg);  // what if normg==0 ?
    }
    // end main iteration loop

    if (found) return new PairObjDouble(x, fx);
    else throw new OptimizerException("Thread did not find a solution"+
                                      " satisfying tolerance criteria from "+
                                      "the given initial point x0="+x0);
  }

}
