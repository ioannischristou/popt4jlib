package popt4jlib.GradientDescent;

import java.util.*;
import utils.*;
import popt4jlib.*;
import parallel.*;

public class RandomDescents implements LocalOptimizerIntf {
  private static int _nextId = 0;
  private int _id;
  private Hashtable _params;
  private double _incValue=Double.MAX_VALUE;
  private VectorIntf _inc=null;  // incumbent vector
  private RDThread[] _threads=null;
  protected FunctionIntf _f;


  public RandomDescents() {
    _id = incrID();
  }
  public RandomDescents(Hashtable params) {
    this();
    try {
      setParams(params);
    }
    catch (Exception e) {
      // no-op: cannot reach this point
    }
  }


  /**
   * return a copy of the parameters. Modifications to the returned object
   * do not affect the data member.
   * @return Hashtable
   */
  public synchronized Hashtable getParams() {
    return new Hashtable(_params);
  }


  /**
   * the optimization params are set to p
   * @param p Hashtable
   * @throws OptimizerException
   */
  public synchronized void setParams(Hashtable p) throws OptimizerException {
    if (_f!=null) throw new OptimizerException("cannot modify parameters while running");
    _params = null;
    _params = new Hashtable(p);  // own the params
  }


  public LocalOptimizerIntf newInstance() {
    return new RandomDescents();
  }


  public PairObjDouble minimize(FunctionIntf f) throws OptimizerException {
    try {
      synchronized (this) {
        if (_f != null)throw new OptimizerException(
            "RandomDescents.minimize(): " +
            "another thread is concurrently executing the method on the same object");
        _f = f;
      }
      int numthreads = 1;
      Integer ntI = (Integer) _params.get("rd.numthreads");
      if (ntI != null && ntI.intValue() > 1) numthreads = ntI.intValue();

      try {
        Barrier.setNumThreads("rd." + getId(), numthreads); // initialize barrier
      }
      catch (ParallelException e) {
        e.printStackTrace();
        throw new OptimizerException("barrier init. failed");
      }

      _threads = new RDThread[numthreads];
      int ntries = 100;
      Integer ntriesI = (Integer) _params.get("rd.numtries");
      if (ntriesI != null && ntriesI.intValue() > 1) ntries = ntriesI.intValue();
      for (int i = 0; i < numthreads; i++) {
        _threads[i] = new RDThread(i, ntries, this);
      }
      for (int i = 0; i < numthreads; i++) {
        _threads[i].start();
      }
      // wait until all threads finish
      for(int i=0; i<numthreads; i++) {
        try {
          _threads[i].join();
        }
        catch (InterruptedException e) {
          Thread.currentThread().interrupt(); // recommended action
        }
      }
      if (_inc == null) // didn't find a solution
        throw new OptimizerException("failed to find solution");
      // ok, we're done
      PairObjDouble pr = new PairObjDouble(_inc, _incValue);
      return pr;
    }
    finally {
      _f = null;
    }
  }


  synchronized void setIncumbent(VectorIntf arg, double val) throws OptimizerException {
    if (val<_incValue) {
      if (Debug.debug(Constants.RD)!=0) {
        // sanity check
        double incval = _f.eval(arg, _params);
        if (Math.abs(incval - _incValue) > 1.e-25) {
          Messenger.getInstance().msg("RD.setIncumbent(): arg-val originally=" +
                                      _incValue + " fval=" + incval + " ???", 0);
          throw new OptimizerException(
              "RD.setIncumbent(): insanity detected; " +
              "most likely evaluation function is " +
              "NOT reentrant... " +
              "Add the 'function.notreentrant,num'" +
              " pair (num=1 or 2) to run parameters");
        }
        // end sanity check
      }
      _incValue=val;
      _inc=arg;
      Messenger.getInstance().msg("setIncumbent(): best sol value="+val,0);
    }
  }


  synchronized VectorIntf getIncumbent() {
    return _inc;
  }


  int getId() { return _id; }


  private synchronized static int incrID() {
    return ++_nextId;
  }

}


class RDThread extends Thread {

  private RandomDescents _master;
  private int _numtries;
  private int _id;

  public RDThread(int id, int numtries, RandomDescents master) {
    _id = id;
    _master=master;
    _numtries=numtries;
  }

  public void run() {
    Hashtable p = _master.getParams();  // returns a copy
    p.put("thread.id", new Integer(_id));
    VectorIntf best = null;
    double bestval = Double.MAX_VALUE;
    FunctionIntf f = _master._f;
    for (int i=0; i<_numtries; i++) {
      try {
        Barrier.getInstance("rd."+_master.getId()).barrier();
        VectorIntf x0 = _master.getIncumbent();
        PairObjDouble pair = descent(f, x0, p);
        if (pair==null) {
          continue;
        }
        double val = pair.getDouble();
        if (val<bestval) {
          bestval=val;
          best=(VectorIntf) pair.getArg();
          _master.setIncumbent(best, bestval);
        }
      }
      catch (Exception e) {
        e.printStackTrace();
        // no-op
      }
    }
  }


  private PairObjDouble descent(FunctionIntf f, VectorIntf x0, Hashtable p) throws OptimizerException {
    VecFunctionIntf grad = (VecFunctionIntf) p.get("rd.gradient");
    if (grad==null) grad = new GradApproximator(f);  // default: numeric computation of gradient
    if (x0==null) {
      x0 = (VectorIntf) p.get("rd.x0");  // get x0 from the initial params
      if (x0==null)
        throw new OptimizerException("null x0 initial point passed");
    }
    VectorIntf x = x0.newCopy();  // don't modify the initial soln
    final int n = x.getNumCoords();
    double gtol = 1e-8;
    Double gtolD = (Double) p.get("rd.gtol");
    if (gtolD!=null && gtolD.doubleValue()>0) gtol = gtolD.doubleValue();
    double h=0;
    double rho = 0.1;
    Double rD = (Double) p.get("rd.rho");
    if (rD!=null && rD.doubleValue()>0)
      rho = rD.doubleValue();
    double beta = 0.2;
    Double bD = (Double) p.get("rd.beta");
    if (bD!=null && bD.doubleValue()>0)
      beta = bD.doubleValue();
    double gamma = 1;
    Double gD = (Double) p.get("rd.gamma");
    if (gD!=null && gD.doubleValue()>0)
      gamma = gD.doubleValue();
    double fx = Double.NaN;
    double looptol = 1.e-25;
    Double ltD = (Double) p.get("rd.looptol");
    if (ltD!=null && ltD.doubleValue() > 0) looptol = ltD.doubleValue();
    VectorIntf g = grad.eval(x, p);
    fx = _master._f.eval(x, p);
    double f0 = fx;
    final double norminfg = VecUtil.normInfinity(g);
    final double normg = VecUtil.norm2(g);
    if (norminfg <= gtol) {
      Messenger.getInstance().msg("found sol w/ norminfg="+norminfg,0);
      return new PairObjDouble(x, fx);
    }

    // determine descent direction s
    VectorIntf s = g.newCopy();
    double len = 0.0;
    for (int i=0; i<n; i++) {
      double gi = g.getCoord(i);
      if (Math.abs(gi)>1e-6/n) {  // itc: HERE change into param asap
        double r = RndUtil.getInstance(_id).getRandom().nextDouble();
        if (r<0.55) {  // itc: HERE change into param asap
          s.setCoord(i, -gi);
          len += gi*gi;
        }
        else s.setCoord(i, 0.0);
      }
      else s.setCoord(i, 0.0);
    }
    // normalize the direction s
    len = Math.sqrt(len);
    if (len<gtol) {  // the search vector chosen is too small
      return null;
    }
    for (int i=0; i<n; i++) {
      s.setCoord(i, s.getCoord(i)/len);
    }

    double[] xa = new double[n];
    for (int i=0; i<n; i++) xa[i] = x.getCoord(i);
    // Armijo Rule implementation
    // determine step-size h
    double rprev = rho*gamma*VecUtil.innerProduct(g,s);
    int m=0;
    while (rprev < -looptol) {
      for (int i=0; i<n; i++) x.setCoord(i, xa[i]+Math.pow(beta,m)*gamma*s.getCoord(i));
      double fval = _master._f.eval(x,p);
      if (fval <= fx + rprev) {
        h = Math.pow(beta,m)*gamma;
        break;
      }
      rprev = beta*rprev;
      m++;
    }
    // set new x
    for (int i=0; i<n; i++) x.setCoord(i, xa[i] + h*s.getCoord(i));
    fx = _master._f.eval(x,p);
    if (fx < f0) return new PairObjDouble(x, fx);
    else return null;
  }

}

