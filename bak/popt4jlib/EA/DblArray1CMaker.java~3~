package popt4jlib.EA;

import popt4jlib.*;
import utils.*;
import java.util.*;

public class DblArray1CMaker implements RandomChromosomeMakerIntf {
  public DblArray1CMaker() {
  }


  public Object createRandomChromosome(Hashtable params) throws OptimizerException {
    try {
      final int nmax = ( (Integer) params.get("dea.chromosomelength")).intValue();
      final double maxalleleval=((Double) params.get("dea.maxallelevalue")).doubleValue();
      final double minalleleval=((Double) params.get("dea.minallelevalue")).doubleValue();
      final int id = ((Integer) params.get("thread.id")).intValue();
      double[] arr = new double[nmax];
      for (int i=0; i<nmax; i++) {
        // ensure bounds, if any
        double maxargvali = maxalleleval;
        Double MaviD = (Double) params.get("dea.maxallelevalue"+i);
        if (MaviD!=null && MaviD.doubleValue()<maxalleleval)
          maxargvali = MaviD.doubleValue();
        double minargvali = minalleleval;
        Double maviD = (Double) params.get("dea.minallelevalue"+i);
        if (maviD!=null && maviD.doubleValue()>minalleleval)
          minargvali = maviD.doubleValue();
        arr[i] = minargvali +
            RndUtil.getInstance(id).getRandom().nextDouble()*(maxargvali-minargvali);
      }
      return arr;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new OptimizerException("createRandomChromosome: failed");
    }
  }
}
