package parallel;

import java.util.Vector;

public class LimitedTimeTaskExecutor {
  private long _msecs2wait;  // milliseconds to wait for before proceeding
  private Vector _threads;  // Vector<LTEThread t>

  public LimitedTimeTaskExecutor(long maxresponsetime2wait) {
    _msecs2wait = maxresponsetime2wait;
    _threads = new Vector();
  }


  public synchronized int getNumThreads() { return _threads.size(); }

  /**
   * executes the TaskObject argument in a different thread, and waits for
   * _msecs2wait milliseconds for the run() method of the task object to
   * finish. If it does, then it returns true, otherwise it returns false.
   * @param task TaskObject
   * @return boolean
   */
  public synchronized boolean execute(TaskObject task) {
    final int n = _threads.size();
    ExecutorThread t = null;
    for (int i=0; i<n && t==null; i++) {
      ExecutorThread ti = (ExecutorThread) _threads.elementAt(i);
      if (ti.isAvailable()) t = ti;
    }
    if (t==null) {
      // update thread priorities
      for (int i=0; i<n; i++) {
        ExecutorThread ti = (ExecutorThread) _threads.elementAt(i);
        ti.updatePriority(_msecs2wait);
      }
      t = new ExecutorThread(this);
      t.start();
      _threads.addElement(t);  // add the new thread in the vector of threads
    }
    // now we have a Thread that is free
    t.runTask(task);  // give the task to the thread t to execute.
    try {
      long startwait = System.currentTimeMillis();
      wait(_msecs2wait);  // wait up to _msecs2wait, then return
      long dur = System.currentTimeMillis()-startwait;
      if (dur<_msecs2wait)
        return true;
      else return false;
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      return false;
    }
  }
}


class ExecutorThread extends Thread {
  private SingleQueue _q;
  private boolean _isRunning;
  private long _currentTaskStartTime;
  private long _lastFactor=0;
  private LimitedTimeTaskExecutor _lte;

  public ExecutorThread(LimitedTimeTaskExecutor lte) {
    setDaemon(true);  // all threads are deamon and will end when the main
                      // thread ends
    _q = new SingleQueue();
    _isRunning=false;
    _lte = lte;
  }
  public void run() {
    while (true) {
      TaskObject o = _q.getTaskObject();
      setIsRunning(true);
      try {
        o.run();
      }
      catch (Exception e) {  // TaskObject threw an exception: ignore & continue
        e.printStackTrace();  // no-op
      }
      setIsRunning(false);
      synchronized (_lte) {
        _lte.notifyAll();
      }
    }
  }
  synchronized void updatePriority(long msecs) {
    if (msecs<=0) return;
    if (_currentTaskStartTime>0) {
      long now = System.currentTimeMillis();
      long div = (now-_currentTaskStartTime)/msecs;
      if (div>_lastFactor) {
        _lastFactor = div;
        int prior = getPriority()-1;
        if (prior > Thread.MIN_PRIORITY) setPriority(prior);  // lower priority
      }
    }
    else _lastFactor = 0;
  }

  protected synchronized boolean isAvailable() {
    boolean res =  !_isRunning && _q.isEmpty();
    return res;
  }
  protected void runTask(TaskObject to) {
    _q.putTaskObject(to);
  }

  private synchronized void setIsRunning(boolean v) {
    _isRunning = v;
    if (v) _currentTaskStartTime = System.currentTimeMillis();
    else _currentTaskStartTime=-1;
    _lastFactor = 0;
    setPriority(Thread.NORM_PRIORITY);  // reset thread priority
  }
  private synchronized boolean getIsRunning() { return _isRunning; }
  private synchronized long getCurrentTaskStartTime() {
    return _currentTaskStartTime;
  }
}


class SingleQueue {
  private TaskObject _taskObj;

  SingleQueue() {
    // no-op
  }
  synchronized TaskObject getTaskObject() {
    while (_taskObj==null) {
      try {
        wait();
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
    TaskObject res = _taskObj;
    _taskObj=null;
    notifyAll();
    return res;
  }
  synchronized void putTaskObject(TaskObject to) {
    while (_taskObj!=null) {
      try {
        wait();
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }
    _taskObj = to;
    notifyAll();
  }
  synchronized boolean isEmpty() { return _taskObj==null; }
}

