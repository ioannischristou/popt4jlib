package parallel.distributed;

import parallel.*;
import java.io.*;
import java.net.*;

/**
 * class implementing clients for message-passing between threads living in
 * distributed JVMs. A thread wishing to send or receive a message to another
 * thread (in the same or different JVM), invokes the sendData() or recvData()
 * methods of this class which behave exactly as the shared-memory analogue in
 * class <CODE>parallel.MsgPassingCoordinator</CODE>.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class DMsgPassingCoordinatorClt {
  private String _host="localhost";
  private int _port = 7894;
  private String _coordName="DMsgPassingCoordinator_"+_port;


  /**
   * default constructor assumes the coordinator server lives in the same host
   * (localhost) listening in port 7894, and the name of the coordinator is
   * "DMsgPassingCoordinator_7894".
   * @throws UnknownHostException
   */
  public DMsgPassingCoordinatorClt() throws UnknownHostException {
    InetAddress ia = InetAddress.getLocalHost();
    _host = ia.getHostAddress();
  }


  /**
   * constructor specifies the host and port where the msg passing coordinator
   * server lives, and also the name of the coordinator with whom all sends and
   * receives will coordinate.
   * @param host String
   * @param port int
   * @param coordName String name of the coordinator instance in the server,
   * to be used by threads sending and receiving msgs. Notice that it's possible
   * for the same server to coordinate many different threads and processes via
   * different names.
   * @throws UnknownHostException
   */
  public DMsgPassingCoordinatorClt(String host, int port, String coordName) throws UnknownHostException {
    _host = InetAddress.getByName(host).getHostAddress();
    _port = port;
    _coordName = coordName;
  }


  /**
   * works exactly as the corresponding method with same signature in
   * <CODE>parallel.MsgPassingCoordinator</CODE> class, except that the data
   * must be serializable.
   * @param myid int
   * @param toid int
   * @param data Serializable
   * @throws IOException
   * @throws ClassNotFoundException
   * @throws ParallelException
   */
  public void sendData(int myid, int toid, Serializable data) throws IOException, ClassNotFoundException, ParallelException {
    Socket s = new Socket(_host, _port);
    ObjectOutputStream oos = null;
    ObjectInputStream ois = null;
    try {
      oos = new ObjectOutputStream(s.getOutputStream());
      oos.flush();
      ois = new ObjectInputStream(s.getInputStream());
      oos.writeObject(new DSendMsg(myid, toid, data, _coordName));
      oos.flush();
      Object reply = ois.readObject();
      if (reply instanceof OKReply) {
        return;
      }
      else {
        throw new ParallelException("sendData(myid, toid, data) failed");
      }
    }
    finally {
      if (oos!=null) oos.close();
      if (ois!=null) ois.close();
      s.close();
    }
  }


  /**
   * works exactly as the corresponding method with same signature in
   * <CODE>parallel.MsgPassingCoordinator</CODE> class, except that the data
   * must be serializable.
   * @param myid int
   * @param data Serializable
   * @throws IOException
   * @throws ClassNotFoundException
   * @throws ParallelException
   */
  public void sendData(int myid, Serializable data) throws IOException, ClassNotFoundException, ParallelException {
    Socket s = new Socket(_host, _port);
    ObjectOutputStream oos = null;
    ObjectInputStream ois = null;
    try {
      oos = new ObjectOutputStream(s.getOutputStream());
      oos.flush();
      ois = new ObjectInputStream(s.getInputStream());
      oos.writeObject(new DSendMsg(myid, data, _coordName));
      oos.flush();
      Object reply = ois.readObject();
      if (reply instanceof OKReply) {
        return;
      }
      else {
        throw new ParallelException("sendData(myid, data) failed");
      }
    }
    finally {
      if (oos!=null) oos.close();
      if (ois!=null) ois.close();
      s.close();
    }
  }


  /**
   * works exactly as the corresponding method with same signature in
   * <CODE>parallel.MsgPassingCoordinator</CODE> class, except that the data
   * must be serializable.
   * @param myid int
   * @throws IOException
   * @throws ClassNotFoundException
   * @throws ParallelException
   * @return Object
   */
  public Object recvData(int myid) throws IOException, ClassNotFoundException, ParallelException {
    Socket s = new Socket(_host, _port);
    ObjectOutputStream oos = null;
    ObjectInputStream ois = null;
    try {
      oos = new ObjectOutputStream(s.getOutputStream());
      oos.flush();
      ois = new ObjectInputStream(s.getInputStream());
      oos.writeObject(new DRecvMsg(myid, _coordName));
      oos.flush();
      Object reply = ois.readObject();
      return reply;
    }
    finally {
      if (oos!=null) oos.close();
      if (ois!=null) ois.close();
      s.close();
    }
  }


  /**
   * works exactly as the corresponding method with same signature in
   * <CODE>parallel.MsgPassingCoordinator</CODE> class, except that the data
   * must be serializable.
   * @param myid int
   * @param fromid int
   * @throws IOException
   * @throws ClassNotFoundException
   * @throws ParallelException
   * @return Object
   */
  public Object recvData(int myid, int fromid) throws IOException, ClassNotFoundException, ParallelException {
    Socket s = new Socket(_host, _port);
    ObjectOutputStream oos = null;
    ObjectInputStream ois = null;
    try {
      oos = new ObjectOutputStream(s.getOutputStream());
      oos.flush();
      ois = new ObjectInputStream(s.getInputStream());
      oos.writeObject(new DRecvMsg(myid, fromid, _coordName));
      oos.flush();
      Object reply = ois.readObject();
      return reply;
    }
    finally {
      if (oos!=null) oos.close();
      if (ois!=null) ois.close();
      s.close();
    }
  }
}

