package parallel.distributed;

import parallel.*;
import java.io.*;
import java.net.*;

/**
 * class implements the "Client" for networks of PDBatchTaskExecutorWrk workers.
 * Connects to a host server represented by the PDBatchTaskExecutorSrv object,
 * to a specific host/port IP address.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class PDBatchTaskExecutorClt {
  private String _host="localhost";  // default host
  private int _port = 7891;  // default client port

  /**
   * public no-arg constructor, will assume connection is to be made on
   * localhost, port 7891.
   */
  public PDBatchTaskExecutorClt() {
  }


  /**
   * constructor provides explicitly the server host/port connection parameters.
   * @param host String
   * @param port int
   */
  public PDBatchTaskExecutorClt(String host, int port) {
    _host = host;
    _port = port;
  }


  /**
   * the main method of the class. Sends over the network the tasks parameter
   * to the PDBatchTaskExecutorSrv server, who then distributes them to one
   * of the available workers in the network.
   * @param tasks TaskObject[]
   * @throws IOException
   * @throws ClassNotFoundException
   * @throws PDBatchTaskExecutorException
   * @return Object[]
   */
  public Object[] submitWork(TaskObject[] tasks)
      throws IOException, ClassNotFoundException, PDBatchTaskExecutorException {
    if (tasks==null || tasks.length==0)
      throw new PDBatchTaskExecutorException("PDBatchTaskExecutorClt.submitWork(tasks): null or empty tasks passed in.");
    Socket s = null;
    ObjectInputStream ois=null;
    ObjectOutputStream oos=null;
    try {
      s = new Socket(_host, _port);
      oos = new ObjectOutputStream(s.getOutputStream());
      oos.flush();
      ois = new ObjectInputStream(s.getInputStream());
      TaskObjectsExecutionRequest req = new TaskObjectsExecutionRequest(tasks);
      oos.writeObject(req);
      oos.flush();
      Object response = ois.readObject();
      if (response instanceof TaskObjectsExecutionResults) {
        return ( (TaskObjectsExecutionResults) response)._results;
      }
      else if (response instanceof NoWorkerAvailableResponse)
        throw new PDBatchTaskExecutorException("no worker was available...");
      else throw new PDBatchTaskExecutorException("cannot parse response...");
    }
    finally {
      if (s!=null) s.close();
    }
  }

}

