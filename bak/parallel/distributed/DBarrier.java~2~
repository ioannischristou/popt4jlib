package parallel.distributed;

import parallel.*;
import java.net.*;
import java.io.*;

/**
 * class implements a distributed barrier object across many threads living
 * in many (remote) JVMs.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class DBarrier {
  private String _host = "localhost";
  private int _port = 7896;
  private String _coordname = "DBarrier_"+_port;
  private DMsgPassingCoordinatorLongLivedConnClt _coordclt=null;
  private Thread _originatingThread = null;

  public DBarrier() throws UnknownHostException, IOException, ClassNotFoundException, ParallelException {
    _coordclt = new DMsgPassingCoordinatorLongLivedConnClt(_host, _port, _coordname);
    _originatingThread = Thread.currentThread();
    DBarrierAddRequest addreq = new DBarrierAddRequest(_coordname);
    _coordclt.sendData(-1, addreq);
  }


  public DBarrier(String host, int port, String coordname) throws UnknownHostException, IOException, ClassNotFoundException, ParallelException {
    _host = host;
    _port = port;
    _coordname = coordname;
    _originatingThread = Thread.currentThread();
    _coordclt = new DMsgPassingCoordinatorLongLivedConnClt(_host, _port, _coordname);
    DBarrierAddRequest addreq = new DBarrierAddRequest(_coordname);
    _coordclt.sendData(-1, addreq);
  }


  public void barrier() throws IOException, ClassNotFoundException, ParallelException {
    // 0. check if thread is ok
    if (Thread.currentThread()!=_originatingThread) {
      throw new ParallelException("barrier(): method called from thread different than the one originating the object");
    }
    // 1. send a Barrier request
    _coordclt.sendData(-1, new DBarrierRequest(_coordname));  // barrier and coord names are the same
    // 2. when a DBarrierReply object is reeived, you're done.
    Object reply = _coordclt.recvData(-1);
    if (reply instanceof DBarrierReply) return;
    else throw new ParallelException("unexpected response");
  }

}

