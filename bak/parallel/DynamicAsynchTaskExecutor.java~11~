package parallel;

import java.util.*;

/**
 * A faster class that implements thread-pooling to allow its users to execute
 * concurrently tasks implementing the Runnable interface. The run() method of
 * each task must clearly be thread-safe!, and also, after calling execute(task)
 *  no thread (including the one in which the call originated) should manipulate
 * in any way the submitted task. Unfortunately, there is no mechanism in the
 * language to enforce this constraint; the user of the library has to enforce
 * this (mild) constraint in their code.
 * The class utilizes the (faster) Message-Passing mechanism implemented in the
 * <CODE>SimpleFasterMsgPassingCoordinator</CODE> class of this package.
 * The class itself is thread-safe meaning that there can exist multiple
 * <CODE>DynamicAsynchTaskExecutor</CODE> objects, and multiple
 * concurrent threads may call the public methods of the class on the same or
 * different objects as long as the constraints mentioned above are satisfied.
 * The thread-pool will grow in size when tasks are submitted and there are
 * no available threads to run them (up to a certain max capacity threshold).
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public final class DynamicAsynchTaskExecutor {
  private static int _nextId = 0;
  private int _id;  // DynamicAsynchTaskExecutor id
  private Vector _threads;
  private int _maxNumThreads;
  private boolean _isRunning;
  private boolean _runOnCurrent=true;


  /**
   * public constructor, constructing a thread-pool of numthreads threads.
   * @param numthreads int the number of initial threads in the thread-pool
   * @param maxthreads int the max. number of threads in the thread-pool
   * @throws ParallelException if numthreads <= 0 or if too many threads are
   * asked to be created or if maxthreads < numthreads.
   */
  public DynamicAsynchTaskExecutor(int numthreads, int maxthreads) throws ParallelException {
    if (numthreads<=0) throw new ParallelException("constructor arg must be > 0");
    if (maxthreads > SimpleFasterMsgPassingCoordinator.getMaxSize() ||
        numthreads > maxthreads)
      throw new ParallelException("cannot construct so many threads");
    _id = getNextObjId();
    _threads = new Vector(numthreads);  // numthreads arg. denotes capacity
    _maxNumThreads = maxthreads;
    for (int i=0; i<numthreads; i++) {
      Thread ti = new DATEThread(this, -(i+1));
      _threads.addElement(ti);
      ti.setDaemon(true);  // thread will end when main thread ends
      ti.start();
    }
    _isRunning = true;
  }


  /**
   * public constructor, constructing a thread-pool of numthreads threads.
   * @param numthreads int the number of threads in the thread-pool.
   * @param maxthreads int the max number of threads in the thread-pool.
   * @param runoncurrent boolean if false no task will run on current thread in
   * case the threads in the pool are full and no new thread can be created.
   * @throws ParallelException if numthreads <= 0 or if numthreads>maxthreads.
   */
  public DynamicAsynchTaskExecutor(int numthreads, int maxthreads,
                                   boolean runoncurrent)
      throws ParallelException {
    this(numthreads, maxthreads);
    _runOnCurrent = runoncurrent;
  }


  /**
   * get the current number of tasks in the queue awaiting processing.
   * @return int
   */
  public int getNumTasksInQueue() {
    return SimpleFasterMsgPassingCoordinator.getInstance("DynamicAsynchTaskExecutor" +
                                              _id).getNumTasksInQueue();
  }


  /**
   * the main method of the class. Submits a <CODE>Runnable</CODE> interface
   * for execution, and the thread-pool will ignore any exceptions any task may
   * throw when its run() method is invoked.
   * The call is asynchronous, so that the method does return immediately
   * without waiting for any task to complete; however, if all threads in the
   * thread-pool are busy and there is no room for a new thread and the
   * <CODE>DynamicAsynchTaskExecutor</CODE> was constructed via the
   * two-argument constructor, or the third argument in the three-argument
   * constructor was true, then the task executes in the current thread.
   * The call will also block in case the queue of tasks in the thread-pool
   * (implemented in <CODE>SimpleFasterMsgPassingCoordinator</CODE> class of
   * this package) is full (default=10000) in which case the current thread will
   * wait until threads in the thread-pool finish up their tasks so the queue
   * becomes less than full and can accept more tasks.
   * @param tasks Collection
   * @throws ParallelException if the shutDown() method has been called prior
   * to this call
   */
  public void execute(Runnable task) throws ParallelException {
    if (task == null)return;
    if (isRunning() == false)
      throw new ParallelException("thread-pool is not running");
    boolean run_on_current = false;
    synchronized (this) {
      System.err.println("Current total #threads="+getNumThreads());  // itc: HERE rm asap
      if (getNumIdleThreads() > getNumTasksInQueue()) { // ok
        SimpleFasterMsgPassingCoordinator.getInstance(
            "DynamicAsynchTaskExecutor" + _id).sendDataBlocking(_id, task);
      }
      else {
        if (getNumThreads() < _maxNumThreads) { // create new thread
          Thread ti = new DATEThread(this, - (getNumThreads() + 1));
          _threads.addElement(ti);
          ti.setDaemon(true); // thread will end when main thread ends
          ti.start();
          SimpleFasterMsgPassingCoordinator.getInstance(
              "DynamicAsynchTaskExecutor" + _id).sendDataBlocking(_id, task);
        }
        else {  // no capacity remaining
          if (_runOnCurrent) run_on_current = true;
          else {  // send to the thread-pool anyway
            System.err.println("DATE:sending to the thread-pool anyway");  // itc: HERE rm asap
            SimpleFasterMsgPassingCoordinator.getInstance(
                "DynamicAsynchTaskExecutor" + _id).sendDataBlocking(_id, task);
          }
        }
      }
    }  // end synchronized block
    if (run_on_current) {
      utils.Messenger.getInstance().msg(
          "DynamicAsynchTaskExecutor.execute(task): running task on current thread",
          0);
      task.run(); // run on current thread
    }
  }


  /**
   * shut-down all the threads in this executor's thread-pool. It is the
   * caller's responsibility to ensure that after this method has been called
   * no other thread (including the threads in the thread-pool) won't call the
   * execute() method. Use of condition-counters or similar may be
   * necessary when tasks given to the thread-pool for execution may call the
   * <CODE>execute()</CODE> method recursively.
   * The executor cannot be used afterwards, and will throw ParallelException
   * if the method execute() or shutDown() is called again.
   * @throws ParallelException
   * @throws InterruptedException
   */
  public synchronized void shutDown() throws ParallelException {
    if (_isRunning==false)
      throw new ParallelException("shutDown() has been called already");
    final int numthreads = _threads.size();
    for (int i=0; i<numthreads; i++) {
      DATEPoissonPill p = new DATEPoissonPill();
      execute(p);
    }
    _isRunning = false;
    return;
  }


  /**
   * return the number of threads in the thread-pool.
   * @return int
   */
  public synchronized int getNumThreads() {
    if (_threads!=null)
      return _threads.size();
    else return 0;
  }


  int getObjId() { return _id; }


  /**
   * if true there currently (but without guarantee for how long in the presence
   * of multiple threads invoking the execute() method of this object)
   * exists at least one idle thread in the thread-pool.
   * @return int num idle threads
   */
  private synchronized int getNumIdleThreads() {
    int num=0;
    for (int i=0; i<_threads.size(); i++) {
      if (((DATEThread) _threads.get(i)).isIdle()) ++num;
    }
    return num;
  }


  private synchronized boolean isRunning() { return _isRunning; }


  private synchronized static int getNextObjId() { return ++_nextId; }
}


/**
 * helper class for DynamicAsynchTaskExecutor.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
class DATEThread extends Thread {
  private DynamicAsynchTaskExecutor _e;
  private int _id;
  private boolean _isIdle=true;

  /**
   * public constructor. The id argument is a negative integer.
   * @param e DynamicAsynchTaskExecutor
   * @param id int
   */
  public DATEThread(DynamicAsynchTaskExecutor e, int id) {
    _e = e;
    _id = id;
  }


  /**
   * the run() method of the thread, loops continuously, waiting for a task
   * to arrive via the SimpleFasterMsgPassingCoordinator class and executes it.
   * Any exceptions the task throws are caught & ignored. In case the data that
   * arrives is a PoissonPill, the thread exits its run() loop.
   */
  public void run() {
    final int fpbteid = _e.getObjId();
    boolean do_run = true;
    while (do_run) {
      Object data = SimpleFasterMsgPassingCoordinator.getInstance("DynamicAsynchTaskExecutor"+fpbteid).
                      recvData(_id);
      setIdle(false);
      try {
        if (data instanceof PoissonPill) {
          do_run = false; // done
          break;
        }
        else if (data instanceof Runnable) ( (Runnable) data).run();
        else throw new ParallelException("data object cannot be run");
      }
      catch (Exception e) {
        e.printStackTrace();  // task threw an exception, ignore and continue
      }
      setIdle(true);
    }
  }

  synchronized void setIdle(boolean v) { _isIdle = v; }
  synchronized boolean isIdle() { return _isIdle; }
}


/**
 * class indicates shut-down of thread-pool
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
class DATEPoissonPill implements Runnable {
  public void run() {
    // no-op
  }
}

