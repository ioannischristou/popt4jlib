package parallel;

import java.util.Vector;

public class PBTETest {
  public PBTETest() {
  }

  public static void main(String[] args) {
    if (args.length<3) {
      System.err.println("usage: java -cp <classpath> parallel.PBETest <j0> <numtasks> <numthreads> [range](def: 1000)");
      System.exit(-1);
    }
    try {
      long start = System.currentTimeMillis();
      Vector tasks = new Vector();
      java.util.Random r = new java.util.Random(7);
      final long j0 = Long.parseLong(args[0]);
      final int numtries = Integer.parseInt(args[1]);
      final int numthreads = Integer.parseInt(args[2]);
      int range = 1000;
      if (args.length>3) range = Integer.parseInt(args[3]);
      ParallelBatchTaskExecutor pbte = new ParallelBatchTaskExecutor(numthreads);
      for (int i=0; i<numtries; i++) {
        long j1 = j0*r.nextInt();
        long j2 = j1 + range;
        TestTask tti = new TestTask(i, j1, j2);
        tasks.add(tti);
      }
      int numtasks = pbte.executeBatch(tasks);
      long dur = System.currentTimeMillis()-start;
      System.out.println("Executed "+numtasks+" tasks in "+dur+" msecs.");
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}

class TestTask implements TaskObject {
  int _id;
  long _i;
  long _j;
  Vector _factors;
  boolean _done = false;

  public TestTask(int id, long i, long j) {
    _id = id; _i = i; _j = j;
  }

  public void run() {
    // compute all prime factors for all numbers between _i and _j
    _factors = new Vector();
    for (long k = _i; k<=_j; k++) {
      boolean nofactors=true;
      long c = k;
      long sqrti = (long) Math.ceil(Math.sqrt(k));
      for (long j = 2; j <= sqrti; j++) {
        if (c % j == 0) {
          _factors.add(new Long(j));
          c /= j;
          j--;
          nofactors=false;
        }
      }
      if (nofactors) _factors.add(new Long(k));
    }
    System.out.println("Task "+_id+" executed and found "+_factors.size()+
                       " factors in ["+_i+", "+_j+"]");
    _done=true;
  }

  public boolean isDone() {
    return _done;
  }
}

