package parallel;

import java.util.Vector;
import utils.*;


/**
 * The BlockingMsgPassingCoordinator class is yet another Singleton class that
 * implements the rendevouz mechanism in parallel programming.
 * Threads can call the method sendData(thread-id, data) to store some data in a
 * queue that only the thread with thread-id can retrieve (in a FIFO fashion
 * only), and waits until the datum is received by the receiver thread.
 * The data Objects that are stored are not copies
 * of the original objects, but rather references to them and so should not
 * be changed in any way after they are stored via a call to sendData... or
 * more appropriately, the sender thread should make sure it sends to the
 * receiver thread a copy of the data it intends to send. Unfortunately, the
 * latter strategy cannot be effectively enforced as Object.clone() is a
 * protected method, and it cannot be called on the parameter passed in the
 * send method from this code. Also, if we require that the objects to be sent
 * implement some interface (say, Clonable, as opposed to the Java built-in
 * (empty) Cloneable interface), then the objects that we are most likely
 * interested in sending/receiving, which are Java built-in data types including
 * arrays, will not be passable per se...
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class BlockingMsgPassingCoordinator {
  private static final int _maxSize=10000;
  private Vector _data;  // Vector<Pair<Integer threadid, Object data> >
  private static BlockingMsgPassingCoordinator _instance=null;


  private BlockingMsgPassingCoordinator() {
    _data = new Vector();
  }


  public synchronized static BlockingMsgPassingCoordinator getInstance() {
    if (_instance==null) {
      _instance = new BlockingMsgPassingCoordinator();
    }
    return _instance;
  }


  /**
   * stores the data object to be consumed by any thread that invokes recvData()
   * method -regardless of which thread that is. The method waits until the
   * data is retrieved.
   * @param data Object
   * @throws ParallelException if there are more data than _maxSize in the queue
   * at the time when the method is invoked.
   */
  public synchronized void sendData(Object data) throws ParallelException {
    if (_data.size()>=_maxSize)
      throw new ParallelException("MsgPassingCoordinator queue is full");
    Pair p = new Pair(null, data);
    _data.addElement(p);
    int data_pos = _data.size();
    notifyAll();
    // wait until item is retrieved
    while (_data.size()!=data_pos-1) {
      try {
        wait();
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();  // recommended action
      }
    }
  }


  /**
   * stores the data object to be consumed only by the first thread that invokes
   * the method recvData(threadId). The method will wait until the data is
   * received.
   * @param threadId int
   * @param data Object
   * @throws ParallelException if there are more data than _maxSize in the queue
   * at the time when the method is invoked.
   */
  public synchronized void sendData(int threadId, Object data)
      throws ParallelException {
    if (_data.size()>=_maxSize)
      throw new ParallelException("MsgPassingCoordinator queue is full");
    Pair p = new Pair(new Integer(threadId), data);
    _data.addElement(p);
    int data_pos = _data.size();
    notifyAll();
    // wait until item is retrieved
    while (_data.size()!=data_pos-1) {
      try {
        wait();
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();  // recommended action
      }
    }
  }


  /**
   * retrieves the first data Object that has been stored via a call (from
   * another thread) to sendData(data) or sendData(threadId, data). If no such
   * data exists, the calling thread will wait until another thread stores an
   * appropriate datum.
   * @param threadId int
   * @return Object
   */
  public synchronized Object recvData(int threadId) {
    while (true) {
      Object res = null;
      for (int i=0; i<_data.size(); i++) {
        Pair p = (Pair) _data.elementAt(i);
        Integer id = (Integer) p.getFirst();
        if (id==null || id.intValue()==threadId) {
          res = p.getSecond();
          _data.remove(i);
          notifyAll();
          return res;
        }
      }
      try {
        wait();
      }
      catch (InterruptedException e) {
        Thread.currentThread().interrupt();  // recommended action
      }
    }
  }

}

