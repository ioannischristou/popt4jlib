package graph;

import utils.*;
import java.util.*;

public class AllMWCFinderBK extends AllMWCFinder {
  public AllMWCFinderBK(Graph g) {
    super(g);
  }


  /**
   * the method computes all maximal cliques in a Graph g so that each node in a
   * resulting clique contributes to the clique with arc weights higher than
   * the specified argument; therefore, it has exponential time and space
   * complexity... Use only on small graphs.
   * The higher the argument, the less cliques it searches for, and the more
   * the computational savings.
   * The method it implements is the Bron & Kerbosch (1973) algorithm
   * BronKerbosch1.
   * It returns the cliques in a Set<Set<NodeId> >
   * @param double minaccnodecliqueweight
   * @return Set a Set<Set<Integer nodeId> >
   */
  public Set getAllMaximalCliques(double minaccnodecliqueweight) {
    final Graph g = getGraph();
    final int n = g.getNumNodes();
    Set P = new IntSet();  // was TreeSet
    for (int i=0; i<n; i++) P.add(new Integer(i));
    Set R = new IntSet();
    Set X = new IntSet();
    Set cliques = new HashSet();
    runBronKerbosch2(R,P,X,minaccnodecliqueweight, cliques);
    // finally remove singleton cliques
    Set result = new TreeSet();
    Iterator it = cliques.iterator();
    while (it.hasNext()) {
      Set si = (Set) it.next();
      if (si.size()>1) result.add(si);
    }
    return result;
  }

  private void runBronKerbosch2(Set R, Set P, Set X, double thres,
                                Set cliques) {
    final Graph g = getGraph();
    if (P.size()==0 && X.size()==0) {
      cliques.add(R);
      return;
    }
    Set PUX = new IntSet(P);
    PUX.addAll(X);
    Iterator it = PUX.iterator();
    Integer uid = (Integer) it.next();  // choose u from P U X
    Set unbors = g.getNode(uid.intValue()).getNborIndices(g, thres);
    unbors.remove(uid);
    it = PUX.iterator();
    while (it.hasNext()) {
      Integer nid = (Integer) it.next();
      if (unbors.contains(nid)) continue;
      if (P.contains(nid)==false) continue;
      Set nidnbors = g.getNode(nid.intValue()).getNborIndices(g, thres);
      nidnbors.remove(nid);
      Set Rnew = new IntSet(R);
      Rnew.add(nid);
      Set Pnew = new IntSet(P);
      Pnew.retainAll(nidnbors);
      Set Xnew = new IntSet(X);
      Xnew.retainAll(nidnbors);
      runBronKerbosch2(Rnew, Pnew, Xnew, thres, cliques);
      P.remove(nid);
      X.add(nid);
    }
  }
}

