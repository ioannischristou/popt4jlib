package graph.packing;

import graph.*;
import popt4jlib.LocalSearch.*;
import utils.*;
import java.util.*;

public class GRASPPackerIntSetNbrhoodFilter2 implements IntSetNeighborhoodFilterIntf {

  public GRASPPackerIntSetNbrhoodFilter2() {
  }


  /**
   * given two integers to be removed from a set, what sets of integers may be
   * added to that set?
   * @param x Object IntSet (with expected cardinality 2)
   * @param arg Object Set<Integer>
   * @param params Hashtable
   * @throws LocalSearchException
   * @return Vector Vector<Integer> the integers that may be tried
   */
  public Vector filter(Object x, Object arg, Hashtable params) throws LocalSearchException {
    try {
      IntSet rmids = (IntSet) x;
      Set s = (Set) arg;
      Graph g = (Graph) params.get("dls.graph");
      Set nbors = new IntSet();
      Iterator it = rmids.iterator();
      while (it.hasNext()) {
        Integer rmid = (Integer) it.next();
        Node rni = g.getNode(rmid.intValue());
        nbors.addAll(rni.getNNborIndices(g));
      }
      Vector res = new Vector(nbors);
      return res;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new LocalSearchException("filter failed.");
    }
  }


  /**
   * provide a Vector<IntSet> of sets of two integers one of which is x.
   * @param x Integer
   * @param arg Set IntSet
   * @param params Hashtable must contain a key-value pair <"dls.graph", Graph g>
   * @throws LocalSearchException
   * @return Vector Vector<IntSet>
   */
  public Vector filter(Integer x, Set arg, Hashtable params) throws LocalSearchException {
    try {
      Graph g = (Graph) params.get("dls.graph");
      Node nx = g.getNode(x.intValue());
      Vector result = new Vector();
      Iterator it = arg.iterator();
      while (it.hasNext()) {
        Integer nyid = (Integer) it.next();
        if (nyid.intValue()==x.intValue()) continue;
        Node ny = g.getNode(nyid.intValue());
        if (g.getShortestPath(nx, ny)<=3) {
          IntSet cand = new IntSet();
          cand.add(x);
          cand.add(nyid);
          result.add(cand);
        }
      }
      return result;
    }
    catch (Exception e) {
      e.printStackTrace();
      throw new LocalSearchException("filter failed...");
    }
  }


  public int getMaxCardinality4Search() {
    return 4;
  }
}

