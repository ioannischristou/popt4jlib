package graph.packing;

import java.util.*;

public class BBQueue extends Thread {
  private TreeSet _nodes;  // TreeSet<BBNode2>
  private BoundedQueue _recentNodes;
  private int _maxSz;
  private boolean _isDone;


  public BBQueue(int max_nodes, int recentsSize) {
    _nodes = new TreeSet();
    if (recentsSize>0)
      _recentNodes = new BoundedQueue(recentsSize);
    else _recentNodes = null;
    _isDone = false;
    _maxSz = max_nodes;
  }


  public void run() {
    System.err.println("BBQueue started.");  // itc: HERE rm asap
    while (true) {
      if (isDone()) return;  // done
      try {
        BBNode2 best = popNode();
        if (best == null) {
          System.err.println("BBQueue done, exits.");
          return; // done
        }
        boolean runit = true;
        if (_recentNodes!=null) runit = !(_recentNodes.contains(best));
        Vector container = new Vector();
        container.add(best);
        if (runit) BBThreadPool.getPool().executeBatch(container);
        else best.setDone();  // indidate it was done
      }
      catch (Exception e) {
        e.printStackTrace();
        System.exit(-1);  // oops...
      }
    }
  }


  synchronized boolean isDone() { return _isDone; }
  public synchronized void setDone() {
    _isDone=true;
    notify();
  }


  synchronized BBNode2 popNode() throws InterruptedException, PackingException {
    while (_nodes.size()==0) {
      if (_isDone) return null;
      wait();
    }
    BBNode2 n = (BBNode2) _nodes.first();
    boolean rm = _nodes.remove(n);
    if (rm==false)
      throw new PackingException("failed to remove node?");
    return n;
  }


  public synchronized int size() {
    return _nodes.size();
  }


  public synchronized boolean insertNode(BBNode2 n) {
    if (_nodes.size()<_maxSz) {
      int old_sz = _nodes.size();
      _nodes.add(n);
      if (_nodes.size()==old_sz) {
        // node was not inserted, thus it is done
        n.setDoneNoAdd2Recent();
      }
      notify();
      return true;
    }
    return false;
  }
  public synchronized boolean insertNodes(Vector children) {
    if (_nodes.size()>=_maxSz)
      return false;  // queue is full. Signal caller
    for (int i=0; i<children.size(); i++) {
      BBNode2 n = (BBNode2) children.elementAt(i);
      int old_sz = _nodes.size();
      _nodes.add(n);
      if (_nodes.size()==old_sz) {
        // node was not inserted, thus it is done
        n.setDoneNoAdd2Recent();
      }
    }
    notify();
    return true;
  }
  public synchronized boolean insertNodes(TreeSet children) {
    if (_nodes.size()>=_maxSz)
      return false;  // queue is full. Signal caller
    Iterator it = children.iterator();
    while (it.hasNext()) {
      BBNode2 n = (BBNode2) it.next();
      int old_sz = _nodes.size();
      _nodes.add(n);
      if (_nodes.size()==old_sz) {
        // node was not inserted, thus it is done
        n.setDoneNoAdd2Recent();
      }
    }
    notify();
    return true;
  }


  public synchronized boolean addInRecent(BBNode2 n) {
    if (_recentNodes==null) return true;
    if (_recentNodes.contains(n)) return false;
    else _recentNodes.insert(n);
    return true;
  }
  public synchronized boolean existsInRecent(BBNode2 n) {
    if (_recentNodes==null) return false;
    if (_recentNodes.contains(n)) return true;
    return false;
  }
}

