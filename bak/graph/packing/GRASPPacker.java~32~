package graph.packing;

import graph.*;
import utils.*;
import parallel.*;
import popt4jlib.*;
import popt4jlib.LocalSearch.*;
import java.util.*;
import java.io.*;

/**
 * Implements a fast GRASP algorithm for the 2-packing problem, a generalization
 * of the well-known combinatorial optimization packing problem. Allows for
 * Local-Search algorithms to kick-in after a solution has been constructed.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class GRASPPacker {
  private Graph _g;
  private TreeSet _nodesq=null;  // TreeSet<Node>
  private TreeSet _origNodesq=null;  // TreeSet<Node>


  /**
   * constructs an instance of the GRASPPacker algorithm.
   * @param g Graph
   * @throws ParallelException
   */
  public GRASPPacker(Graph g) throws ParallelException {
    _g = g;
    // 1. create a priority queue of the nodes in order of connectedness
    // so as to apply the GASP heuristic then
    _g.makeNNbors();
    setup();
  }


  /**
   * create a dist-2 packing for Graph _g via a GRASP method and return it
   * as a Set<Node> of the active nodes.
   * @param Set addfirstfrom a set of Nodes to add from
   * @throws PackingException
   * @throws ParallelException
   * @return Set  // Set<Node>
   */
  public Set pack(Set addfirstfrom) throws PackingException, ParallelException {
    Set res = new HashSet();  // Set<Node>
    if (addfirstfrom!=null) {
      Iterator it = addfirstfrom.iterator();
      while (it.hasNext()) {
        Node n = (Node) it.next();
        if (isFree2Cover(n, res)) {
          res.add(n);
          updateQueue(n);
        }
      }
    }
    boolean cont = true;
    while (cont) {
      cont = false;
      // 1. get the first valid element(s) from the queue
      Set candidates = new TreeSet();
      Iterator it = _nodesq.iterator();
      if (it.hasNext() == false) break;
      Node first = (Node) it.next();
      candidates.add(first);
      //System.err.println("1. Adding first=" + first.getId() +
      //                   " to candidates set w/ card=" + first.getNNbors().size());
      Node n = null;
      if (it.hasNext()) {
        while (it.hasNext()) {
          n = (Node) it.next();
          if (n.getNNbors().size() == first.getNNbors().size()) {
            candidates.add(n);
            /*
            System.err.println("Adding n=" + n.getId() +
                               " to candidates set w/ card=" +
                               n.getNNbors().size());
            */
            continue; // keep adding
          }
          else break;
        }  // while it.hasNext()
        // Pair p = findNearestFree2Cover(candidates, res, nprev);
        // n = (Node) p.getFirst();
        //System.err.println("candidates.size()=" + candidates.size());
        // pick a candidate node at random
        int pos = RndUtil.getInstance().getRandom().nextInt(candidates.size());
        Iterator it2 = candidates.iterator();
        for (int i = 0; i < pos; i++) it2.next();
        n = (Node) it2.next();
        // 2. update the queue
        updateQueue(n);
        // 3. add the element to the result set
        res.add(n);
        //System.err.println("added n=" + n.getId() + " res.size()=" +
        //                   res.size() + " _nodesq.size()=" + _nodesq.size());
        cont = true;
      }
      else {
        if (isFree2Cover(first, res))
          res.add(first);
      }
    }
    reset();  // return _nodesq to original situation
    return res;
  }


  /**
   * g.makeNNbors() must have been called prior to this call
   * @param g Graph
   * @param active Set Set<Integer nodied>
   * @return boolean
   */
  static boolean isFeasible(Graph g, Set active) {
    final int gsz = g.getNumNodes();
    for (int i=0; i<gsz; i++) {
      Node nn = g.getNode(i);
      Set nnbors = nn.getNbors();  // Set<Node>
      int count=0;
      if (active.contains(new Integer(i))) count=1;
      Iterator it2 = active.iterator();
      while (it2.hasNext()) {
        Integer nid2 = (Integer) it2.next();
        Node n2 = g.getNode(nid2.intValue());
        if (nnbors.contains(n2)) {
          ++count;
          if (count>1) return false;
        }
      }
    }
    return true;
  }


  /**
   * check if node nj can be set to one when the nodes in active are also set.
   * @param nj Node
   * @param active Set  // Set<Node>
   * @return boolean // true iff nj can be added to active
   * @throws ParallelException
   */
  private boolean isFree2Cover(Node nj, Set active) throws ParallelException {
    if (active.contains(nj)) return false;
    Set nnborsj = new HashSet(nj.getNNbors());
    nnborsj.retainAll(active);
    if (nnborsj.size()>0) return false;
    return true;
  }


  private void updateQueue(Node n) throws PackingException, ParallelException {
    // 0. remove the node n and the nnbors of n from _nodesq
    _nodesq.remove(n);
    Set nnbors = n.getNNbors();
    _nodesq.removeAll(nnbors);
    // 1. create the nnnbors set of the nbors of _nnbors U n set
    Set nnnbors = new HashSet();  // Set<Node>
    Set nbors = n.getNbors();
    Iterator it = nbors.iterator();
    while (it.hasNext()) {
      Node nbor = (Node) it.next();
      Set nnbors2 = nbor.getNNbors();
      nnnbors.addAll(nnbors2);
    }
    nnnbors.removeAll(nnbors);
    nnnbors.remove(n);
    nnnbors.retainAll(_nodesq);  // don't accidentally insert back bad nodes
    // 2. remove the nnnbors nodes from the _nodesq set and re-insert them
    // (which updates correctly the _nodesq TreeSet)
    // nnnbors are all the nodes at distance 3 from the node n.
    // Update the _nnbors data member of those nodes.
    _nodesq.removeAll(nnnbors);
    Iterator it2 = nnnbors.iterator();
    while (it2.hasNext()) {
      Node nb = (Node) it2.next();
      nb.getNNbors().removeAll(nnbors);
      nb.getNNbors().remove(n);
    }
    _nodesq.addAll(nnnbors);
    nnbors.clear();  // clear n's NNbors
  }


  /**
   * return true iff all nodes in active set can be set to one without
   * violating feasibility.
   * @param active Set  // Set<Node>
   * @return boolean
   * @throws ParallelException
   */
  private boolean isFeasible(Set active) throws ParallelException {
    _g.makeNNbors();  // re-establish nnbors
    final int gsz = _g.getNumNodes();
    for (int i=0; i<gsz; i++) {
      Node nn = _g.getNode(i);
      Set nnbors = nn.getNbors();  // Set<Node>
      int count=0;
      if (active.contains(nn)) count=1;
      Iterator it2 = active.iterator();
      while (it2.hasNext()) {
        Node n2 = (Node) it2.next();
        if (nnbors.contains(n2)) {
          ++count;
          if (count>1) return false;
        }
      }
    }
    return true;
  }


  /**
   * _g.makeNNbors() must have been called before. This method is only called
   * once from this object's constructor.
   */
  private void setup() {
    final int gsz = _g.getNumNodes();
    NodeComparator2 comp = new NodeComparator2();
    _origNodesq = new TreeSet(comp);
    for (int i=0; i<gsz; i++) {
      _origNodesq.add(_g.getNode(i));
    }
    _nodesq = new TreeSet(_origNodesq);
    //System.err.println("done sorting");  // itc: HERE rm asap
  }


  /**
   * called at the end of a pack() method invocation (only)
   * @throws ParallelException
   */
  private void reset() throws ParallelException {
    _g.makeNNbors(true); // force reset (from cache)
    _nodesq = new TreeSet(_origNodesq);
  }


  /**
   * invoke as <CODE>java -cp &ltclasspath&gt graph.packing.GRASPPacker &ltgraph_file&gt [numinitnodes] [numiterations] [do_local_search]</CODE>.
   * The graph_file contains the graph in the format specified in the
   * comments of method <CODE>utils.DataMgr.readGraphFromFile2(filename)</CODE>
   * and the numinitnodes is an optional number specifying how many (non-conflicting)
   * nodes to choose randomly as an initial seed-set to grow from (default is zero).
   * The solution found is written in the file "sol.out" in the current directory.
   * It contains one line for each node included in the solution, and the line
   * has the internal id of the node +1 (so the range of nodes is
   * [1,...Graph.getNumNodes()].
   * @param args String[]
   * @throws ParallelException
   */
  public static void main(String[] args) throws ParallelException {
    try {
      long st = System.currentTimeMillis();
      Graph g = DataMgr.readGraphFromFile2(args[0]);
      int best = 0;
      boolean do_local_search = false;
      GRASPPacker p = new GRASPPacker(g);
      Set init=null;
      int num_iters = 1;
      if (args.length>1) {
        int numinit = 0;
        try {
          numinit = Integer.parseInt(args[1]);
          if (numinit<0) numinit=0;  // ignore wront option value and continue
        }
        catch (ClassCastException e) {
          e.printStackTrace();  // ignore wrong option value and continue
        }
        Graph gp = p._g;
        int gsz = gp.getNumNodes();
        init = new TreeSet(new NodeComparator2());
        for (int i=0; i<numinit; i++) {
          int nid = RndUtil.getInstance().getRandom().nextInt(gsz);
          Node n = gp.getNode(nid);
          init.add(n);
        }
        if (args.length>2) {
          try {
            num_iters = Integer.parseInt(args[2]);
            if (num_iters<0) num_iters = 0;
          }
          catch (ClassCastException e) {
            e.printStackTrace();  // ignore wrong option value and continue
          }
          if (args.length>3) {
            do_local_search = "true".equals(args[3]);
          }
        }
      }
      Set best_found = null;
      for (int i=0; i<num_iters; i++) {
        Set s = p.pack(init); // Set<Node>
        if (do_local_search) {
          // convert s to Set<Integer>
          Set nodeids = new IntSet();
          Iterator iter = s.iterator();
          while (iter.hasNext()) {
            Node n = (Node) iter.next();
            Integer nid = new Integer(n.getId());
            nodeids.add(nid);
          }
          // now do the local search
          DLS dls = new DLS();
          AllChromosomeMakerIntf movesmaker = new IntSetN1RXPFirstImprovingGraphAllMovesMakerMT();
          IntSetNeighborhoodFilterIntf filter = new GRASPPackerIntSetNbrhoodFilter2();
          FunctionIntf f = new SetSizeEvalFunction();
          Hashtable dlsparams = new Hashtable();
          dlsparams.put("dls.movesmaker",movesmaker);
          dlsparams.put("dls.x0", nodeids);
          dlsparams.put("dls.numthreads", new Integer(10));
          dlsparams.put("dls.maxiters", new Integer(10));   // itc: HERE rm asap
          dlsparams.put("dls.graph", g);
          dlsparams.put("dls.intsetneighborhoodfilter", filter);
          //dlsparams.put("dls.createsetsperlevellimit", new Integer(100));
          dls.setParams(dlsparams);
          PairObjDouble pod = dls.minimize(f);
          Set sn = (Set) pod.getArg();
          if (sn!=null) {
            s.clear();
            Iterator sniter = sn.iterator();
            while (sniter.hasNext()) {
              Integer id = (Integer) sniter.next();
              Node n = g.getNode(id.intValue());
              s.add(n);
            }
          }
        }
        int iter_best = s.size();
        System.err.println("GRASPPacker.main(): iter: "+i+": soln size found="+iter_best);  // itc: HERE rm asap
        if (iter_best > best) {
          best_found = s;
          best = iter_best;
        }
      }
      long tot = System.currentTimeMillis()-st;
      System.out.println("Final Best soln found="+best+" total time="+tot+" (msecs)");
      //if (p.isFeasible(s)) System.out.println("feasible soln");
      //else System.err.println("infeasible soln");
      // write solution to file
      PrintWriter pw = new PrintWriter(new FileWriter("sol.out"));
      pw.println(best);
      Iterator it = best_found.iterator();
      while (it.hasNext()) {
          Node n = (Node) it.next();
          pw.println((n.getId()+1));
      }
      pw.flush();
      pw.close();
    }
    catch (Exception e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }
}


class NodeComparator2 implements Comparator, Serializable {
  public final static long serialVersionUID=987654322L;  // recommended

  public int compare(Object o1, Object o2) {
    Node n1 = (Node) o1;
    Node n2 = (Node) o2;
    try {
      int n1sz = n1.getNNbors().size();
      int n2sz = n2.getNNbors().size();
      if (n1sz < n2sz)return -1;
      else if (n1sz == n2sz) {
        int n1s = n1.getNbors().size();
        int n2s = n2.getNbors().size();
        if (n1s < n2s)return -1;
        else if (n1s == n2s) {
          if (n1.getId() < n2.getId())return -1;
          else if (n1.getId() == n2.getId())return 0;
          else return 1;
        }
        else return 1;
      }
      else return 1;
    }
    catch (ParallelException e) {
      e.printStackTrace();  // will get here only if the current thread is a
      //reader and there is another thread currently
      // owning the read-lock of n1 or n2 in which case the comparison result
      // will be wrong
      return 0;
    }
  }
}


class NodeComparator3 implements Comparator, Serializable {
  public static final long serialVersionUID=987654323L;  // recommended

  public int compare(Object o1, Object o2) {
    Node n1 = (Node) o1;
    Node n2 = (Node) o2;
    try {
      int n1sz = n1.getNNbors().size();
      int n2sz = n2.getNNbors().size();
      if (n1sz < n2sz)return -1;
      else if (n1sz == n2sz) {
        if (n1.getId() < n2.getId())return -1;
        else if (n1.getId() == n2.getId())return 0;
        else return 1;
      }
      else return 1;
    }
    catch (ParallelException e) {
      e.printStackTrace();  // will get here only if the current thread is a
      //reader and there is another thread currently
      // owning the read-lock of n1 or n2 in which case the comparison result
      // will be wrong
      return 0;
    }
  }
}

