package graph.packing;

import graph.*;
import parallel.*;
import java.util.*;

/**
 * represents the Branch&Bound Tree of the method.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class BBTree {

  private Graph _g;
  private int _gsz;  // cache
  private int _maxnndeg;  // cache
  private Set _incumbent;
  private BBQueue _q;
  private int _maxQSz=Integer.MAX_VALUE;
  private boolean _cutNodes=false;
  private double _bound;
  private BBNode2 _root2;
  private int _maxNodesAllowed=Integer.MAX_VALUE;
  private int _counter=0;
  private int _parLvl;
  private boolean _useMaxSubsets=true;
  private int _recentMaxLen=-1;
  private int _tightenUpperBoundLvl=Integer.MAX_VALUE;  // obtain a tighter upper bound after this level
  private int _maxChildrenNodesAllowed=Integer.MAX_VALUE;
  private int _maxItersInGBNS2A=100000;
  private double _avgPercExtraNodes2Add=0.0;
  private BBNodeComparatorIntf _bbnodecomp = null;

  public BBTree(Graph g, double initbound) throws PackingException {
    _g = g;
    // elements of the argument
    _parLvl = 2;
    _gsz = _g.getNumNodes();
    _bound = initbound;
    _root2 = new BBNode2(this, null, null);
  }


  public void run() throws InterruptedException, ParallelException {
    _g.makeNNbors(true);  // ensure _nnbors cache for every node is ok before starting
    _maxnndeg=0;
    for (int i=0; i<_gsz; i++) {
      int nndeg = _g.getNode(i).getNNbors().size();
      if (nndeg>_maxnndeg) _maxnndeg = nndeg;
    }
    System.err.println("Done making NNbors");  // itc: HERE rm asap
    // use BBQueue
    _q = new BBQueue(_maxQSz, _recentMaxLen);
    _q.insertNode(_root2);
    _q.start();
    while (!_q.isDone()) {
      Thread.currentThread().sleep(100);
    }
    System.out.println("Soln found: "+_bound);
  }


  public Graph getGraph() { return _g; }
  public int getGraphSize() { return _gsz; }
  public int getGraphMaxNNDegree() { return _maxnndeg; }

  public int getParLvl() { return _parLvl; }

  public BBQueue getQueue() { return _q; }


  public void setMaxNodesAllowed(int n) {
    _maxNodesAllowed = n;
  }
  public int getMaxNodesAllowed() { return _maxNodesAllowed; }

  public double getAvgPercExtraNodes2Add() { return _avgPercExtraNodes2Add; }
  public void setAvgPercExtraNodes2Add(double p) { _avgPercExtraNodes2Add = p; }

  public void setMaxQSize(int s) {
    _maxQSz = s;
  }

  public BBNodeComparatorIntf getBBNodeComparator() {
    if (_bbnodecomp==null) {
      _bbnodecomp = new DefBBNodeComparator();
    }
    return _bbnodecomp;
  }
  public synchronized void setBBNodeComparator(BBNodeComparatorIntf c) {
    if (_bbnodecomp!=null) return;  // can only set once
    _bbnodecomp = c;
  }

  public void setUseMaxSubsets(boolean v) { _useMaxSubsets=v; }
  public boolean getUseMaxSubsets() { return _useMaxSubsets; }

  public void setRecentMaxLen(int len) { _recentMaxLen=len; }
  public int getRecentMaxLen() { return _recentMaxLen; }

  public void setMaxAllowedItersInGBNS2A(int iters) { _maxItersInGBNS2A=iters; }
  public int getMaxAllowedItersInGBNS2A() { return _maxItersInGBNS2A; }

  public void setMaxChildrenNodesAllowed(int n) { _maxChildrenNodesAllowed=n; }
  public int getMaxChildrenNodesAllowed() { return _maxChildrenNodesAllowed; }

  synchronized public void setTightenUpperBoundLvl(int lvl) {
    _tightenUpperBoundLvl=lvl;
  }
  synchronized public int getTightenUpperBoundLvl() { return _tightenUpperBoundLvl; }
  synchronized void reduceTightenUpperBoundLvl() {
    if (_tightenUpperBoundLvl>2 && _tightenUpperBoundLvl!=Integer.MAX_VALUE)
      _tightenUpperBoundLvl = (int) (_tightenUpperBoundLvl*0.8);
  }
  public void setCutNodes(boolean v) { _cutNodes = v; }
  public boolean getCutNodes() { return _cutNodes; }
  synchronized int incrementCounter() { return ++_counter; }
  int getCounter() { return _counter; }  // intentionally unsynchronized


  synchronized public void setIncumbent(BBNode2 n) {
    if (n.getCost()>_bound) {
      //_incumbent = n;
      _incumbent = new HashSet(n.getNodes());
      _bound = n.getCost();
      System.err.println("new soln found w/ val=" + _bound);
    }
  }

  public void setSolution(Set sol) {
    _incumbent = new HashSet(sol);
    _bound = sol.size();
  }
  public int[] getSolution() {
    int inds[] = new int[_gsz];
    Iterator it = _incumbent.iterator();
    while (it.hasNext()) {
      Node ni = (Node) it.next();
      inds[ni.getId()]=1;
    }
    return inds;
  }

  public double getBound() { return _bound; }  // intentionally unsynchronized

}

