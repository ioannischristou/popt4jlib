package utils;


/**
 * utility class with the same semantics as the Pair class, but restricted so
 * that the first object in the Pair is an int and the second a double.
 * <p>Title: popt4jlib</p>
 * <p>Description: A Parallel Meta-Heuristic Optimization Library in Java</p>
 * <p>Copyright: Copyright (c) 2011</p>
 * <p>Company: </p>
 * @author Ioannis T. Christou
 * @version 1.0
 */
public class PairIntDouble implements Comparable {
  int _key;
  double _val;

  /**
   * public constructor.
   * @param i int
   * @param val double
   */
  public PairIntDouble(int i, double val) {
    _key = i;  _val = val;
  }


  /**
   * get the key
   * @return int
   */
  public int getInt() {
    return _key;
  }


  /**
   * get the value
   * @return double
   */
  public double getDouble() {
    return _val;
  }


  /**
   * comparison is based on the double value <CODE>_val</CODE> of this object
   * only.
   * @param o Object
   * @return boolean
   */
  public boolean equals(Object o) {
//    if (o==null) return false;
//    try {
//      PairIntDouble dd = (PairIntDouble) o;
//      if (_val==dd._val) return true;
//      else return false;
//    }
//    catch (ClassCastException e) {
//      return false;
//    }
    if (o==this) return true;
    if (o==null) return false;
    try {
      PairIntDouble dd = (PairIntDouble) o;
      return Double.compare(_val, dd._val)==0;
    }
    catch (ClassCastException e) {
      return false;
    }
  }


  /**
   * returns the value <CODE>Math.floor(this._val)</CODE>
   * @return int
   */
  public int hashCode() {
    if (Double.isNaN(_val)) return 0;  // guard against NAN value
    return (int) Math.floor(_val);
  }


  /**
   * comparison is based on the double value <CODE>_val</CODE> of this object
   * only (increasing order of <CODE>_val</CODE>)
   * @param o Object
   * @return int
   */
  public int compareTo(Object o) {
    // PairIntDouble c = (PairIntDouble) o;
    // this < c => return -1
    // this == c => return 0
    // this > c => return 1
    // if (_val < c._val) return -1;
    // else if (_val == c._val) return 0;
    // else return 1;
    if (o==this) return 0;
    PairIntDouble c = (PairIntDouble) o;
    // this < c => return -1
    // this == c => return 0
    // this > c => return 1
    //if (_val < c._val) return -1;
    //else if (_val == c._val) return 0;
    //else return 1;
    return Double.compare(_val, c._val);
  }
}
